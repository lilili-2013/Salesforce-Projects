<apex:component controller="ComboLookupController" allowDML="true">
    <apex:attribute name="pasteSelectedToSearchText" type="boolean" default="true" description="true/false; if false, search text will not be overwritten"/>
    <apex:attribute name="HotKey" type="String" assignTo="{!HotKey}" description="if specified, will be the alt-key combo to push the button"/>
    <apex:attribute name="urlLinkTo" type="String" assignTo="{!URLLinkTo}" description="if specified, will be the url that is clickable next to the control"/>
    <apex:attribute name="tipText" type="String" assignTo="{!TipText}" description="if specified, will be the mouse hover-over text"/>
    <apex:attribute name="prompt" type="String" description="Label displayed in front of text box"/>
    <apex:attribute name="funcQuery" type="String" assignTo="{!funcQuery}" description="if specified, will be called instead of default query function"/>
    <apex:attribute name="promptClassName" type="String" default="cluDefaultPrompt" assignTo="{!PromptClassName}" description="if not specified will default to cluDefaultPrompt"/>
    <apex:attribute name="textClassName" type="String" default="cluDefaultText" assignTo="{!TextClassName}" description="if not specified will default to cluDefaultText"/>     
    <apex:attribute name="buttonClassName" type="String" default="flatbutton" assignTo="{!ButtonClassName}" description="if not specified will default to flatbutton"/>     
    <apex:attribute name="promptStyleText" type="String" assignTo="{!PromptStyleText}" description="if not specified will be inserted in style string"/>
    <apex:attribute name="textStyleText" type="String"  assignTo="{!TextStyleText}" description="if not specified will be inserted in style string"/>   
    <apex:attribute name="buttonStyleText" type="String" assignTo="{!ButtonStyleText}" description="if not specified will be inserted in style string"/>     
    <apex:attribute name="defaultSelectedItem" type="Integer" default="-1" assignTo="{!defaultSelectedItem}" description="default item that will be highlighted; -1 will cause system to place at first non-add-new record if available"/>
    <apex:attribute name="Text" assignTo="{!Text}" type="String" description="Value displayed on button and in text box"/>
    <apex:attribute name="InitialID" type="String" description="ID when initially rendered"/>
    <apex:attribute name="rowLimit" type="Integer" assignTo="{!RowLimit}" default="25" description="max rows that could be returned"/> 
    <apex:attribute name="sourceobject" default="" assignTo="{!SourceObject}" type="String" description="Object from which results list comes; if not specified, search queries will NOT be executed (only required items displayed)"/>
    <apex:attribute name="outputfields" assignTo="{!OutputFields}" type="String" description="Comma delimited list of fields to be concatenated together as the output text"/>
    <apex:attribute name="filterfield" assignTo="{!FilterField}" type="String" description="Name of field against which filter will be processed"/>
    <apex:attribute name="orderbyfield" assignTo="{!OrderByField}" type="String" description="If specified, determines sorting"/>
    <apex:attribute name="additionalWhereClause" assignTo="{!AdditionalWhereClause}" type="String" description="If specified, added to where clause; note: must be fields on 'sourceobject' table (ex: Category__c=\'Cities\'; be sure to escape single quotes with the backslash before each one if you need to use them."/>
    <apex:attribute name="cluID" assignTo="{!cluID}" type="String" required="true" description="id of this combolookup; REQUIRED, and needs to be unique on the page"/>
    <apex:attribute name="actionType" default="on-enter" assignTo="{!ActionType}" type="String" description="on-enter or per-keystroke; default is no-enter"/>
    <apex:attribute name="minKeyStrokes" default="2" assignTo="{!MinKeyStrokes}" type="String" description="# of keystrokes minimum before query; default is 2"/>
    <apex:attribute name="clearBoxAfterSelect" assignTo="{!ClearBoxAfterSelect}" type="boolean" description="true/false; after user makes a choice it clears the box"/>
    <apex:attribute name="javascriptCallbackFunction" required="true" assignTo="{!JavascriptCallbackFunction}" type="String" description="if defined, will be called when user makes a choice; must specify null"/>
    <apex:attribute name="javascriptCallBackFunctionParms" required="false" assignTo="{!javascriptCallBackFunctionParms}" type="String" description="if defined, will be included after value selected as parms on the javascript callback"/>    
    <apex:attribute name="highlightValueAfterSelection" default="false" assignTo="{!HighlightValueAfterSelection}" type="boolean" description="true/false; highlight text after user choice"/>
    <apex:attribute name="pasteSelectedIDToHTMLElement"  assignTo="{!PasteSelectedIDToHTMLElement}" type="String" description="if specified, ID of item will be pasted to form element when user makes selection"/>
    <apex:attribute name="textWidth" default="110" assignTo="{!TextWidth}" type="String" description="a number like 50; if specified, will set width in pixels of button and text"/>
    <apex:attribute name="textHeight" default="18" assignTo="{!TextHeight}" type="String" description="a number like 50; if specified, will set height in pixels of text"/>
    <apex:attribute name="buttonHeight" default="20" assignTo="{!ButtonHeight}" type="String" description="a number like 50; if specified, will set height in pixels of button "/>    
    <apex:attribute name="promptWidth" default="70" assignTo="{!PromptWidth}" type="String" description="a number like 50; if specified, will set width in pixels of button and text"/>
    <apex:attribute name="promptTextAlign" default="left" assignTo="{!PromptTextAlign}" type="String" description="left, right, center; default left"/>
    <apex:attribute name="buttonTextAlign" default="left" assignTo="{!ButtonTextAlign}" type="String" description="left, right, center; default left"/>
    <apex:attribute name="textTextAlign" default="left" assignTo="{!TextTextAlign}" type="String" description="left, right, center; default left"/>
    <apex:attribute name="requiredItems" default="" assignTo="{!RequiredItems}" type="String" description="items required to appear in the list at the top; format is        id:value#id:value#       -2:Apple#-1:Pear#"/>
    <apex:attribute name="filterRequiredItems" default="false" assignTo="{!FilterRequiredItems}" type="boolean" description="if true, will remove required items that don't hit against search text"/>
    <apex:attribute name="addNewFields" default="" assignTo="{!AddNewFields}" type="String" description="must be specified if includeAddNewOption is true; comma seperated fields that will be populated with data from addnewprompt; note: these will be matched to prompted data in the order specified"/> 
    <apex:attribute name="includeAddNewOption" default="false" assignTo="{!IncludeAddNewOption}" type="boolean" description="if true, will include an 'add new' option at the top of the list with id -1000 and will implement code to create new items based on 'source object' and fields listed in 'output fields'"/>
    <apex:attribute name="includeClearOption" default="true" type="boolean" description="if true, will include an 'Clear value?' option at the top of the list with id -500 and will implement code to clear value based on 'source object' and fields listed in 'output fields'"/>
    <apex:attribute name="addNewPrompt" default="" assignTo="{!AddNewPrompt}" type="string" description="must be specified if includeAddNewOption is true; seperate with # if multiple fields specified in 'outputfields' "/>
    <apex:attribute name="addNewDefaults" assignTo="{!AddNewDefaults}" type="string" description="must be specified if includeAddNewOption is true and target table has required values other than field being supplied by 'outputfields'; format is         field:value:type          seperate with # if multiple fields; if no type specified string will be used; possible types are boolean, string, number; default type is string; "/>
    <apex:attribute name="postIDUponSelect" default="true" assignTo="{!PostIDUponSelect}" type="boolean" description="true or false, default to true; if true, the ID of the selected item will be posted, otherwise the selected text will be posted"/>
    <apex:attribute name="enforceNonNullAddValues" default="false" assignTo="{!EnforceNonNullAddValues}" type="boolean" description="true or false, default to false; if true, will show error if null values supplied"/>
    <apex:attribute name="objectFieldToUpdateUponSelect"  assignTo="{!ObjectFieldToUpdateUponSelect}" type="String" description="if specified, field of object that will be updated"/>
    <apex:attribute name="objectIDToUpdateUponSelect"  assignTo="{!ObjectIDToUpdateUponSelect}" type="String" description="if specified, ID of object being updated (ex a01A0000000hFxZ)"/>
    <apex:attribute name="objectTypeToUpdateUponSelect"  assignTo="{!ObjectTypeToUpdateUponSelect}" type="String" description="if specified, object type being updated (ex Organization__c"/>

   <apex:outputPanel layout="block" id="clu_div" >    <apex:outputPanel layout="block" id="clu_div_update">    <input type="hidden" id="{!cluID}_updatedText" value="{!UpdatedText}"/>    <input type="hidden" id="{!cluID}_updatedID" value="{!UpdatedID}"/> </apex:outputPanel>
      <span class="{!PromptClassName}" style="{!PromptStyleText};vertical-align:middle;display:{!IF((PromptWidth=='0'),'none','inline-block')};width:{!PromptWidth}px;text-align:{!PromptTextAlign};" value="{!prompt}">{!prompt}</span>
      <input class="{!ButtonClassName}" accesskey="{!HotKey}" title="{!TipTextVal}" style="{!ButtonStyleText};vertical-align:middle;text-align:{!ButtonTextAlign};height:{!ButtonHeight}px;width:{!TextWidth}px;padding-left:2px" id="{!cluID}_ToggleButton" value="{!Text}"  type="button" onclick="return ToggleCLUButton('OFF','{!cluID}_ToggleButton','{!cluID}_cluSearchText','{!cluID}_status')"/>
      <input class="{!TextClassName}" type="text"  style="{!TextStyleText};vertical-align:middle;text-align:{!TextTextAlign};height:{!TextHeight}px;width:{!TextWidth}px;position:absolute;visibility:hidden;" 
              id="{!cluID}_cluSearchText" value="{!Text}" onKeyUp="clukp_{!cluID}(event,'{!actionType}',{!minKeyStrokes})" onKeyDown="clukdp_{!cluID}(event,'{!actionType}',{!minKeyStrokes})"
            onKeyPress="return noPageRefreshOnEnterKey(event)"  />
      <a target="_top" style="display:{!IF( urlLinkTo=='' ,'none','inline')}" id="{!cluID}_linkto" href="/{!urlLinkTo}" >@</a>      
      <span id="{!cluID}_status" style="color:green">*</span>      
   </apex:outputPanel>   
 <div layout="block" id="{!cluID}_list_div" title="Retrieved Ids" class="comboLookupMenuBase" style="z-index:99;top={!MenuTopPosition};left={!MenuLeftPosition};position:absolute;visibility:{!IF(ResultCount=0,'hidden','visible')}">
 <input type='hidden' value='{!SelectedRow}' id='{!cluID}_selected_row'/>
 <table id='{!cluID}_list_table' ><apex:repeat var="rslt" value="{!queryResult}" ><tr><td class="{!IF(rslt.RowNumber=0,'comboLookupItemHighlighted','comboLookupItemNormal')}" >{!rslt.DisplayText}
 <input type="hidden" id="{!cluID}_ID_r{!rslt.RowNumber}" value="{!rslt.Id}"/><input type="hidden" id="{!cluID}_VAL_r{!rslt.RowNumber}" value="{!rslt.DisplayText}"/></td></tr></apex:repeat></table></div>
<script>
function cluAddSetup_{!cluID}(s){if (s==null || s=='') alert('{!AddNewPrompt}'); else cluAddNew('{!sourceobject}','{!cluID}',s,'{!addNewFields}', '{!addNewDefaults}', '{!ObjectFieldToUpdateUponSelect}','{!ObjectTypeToUpdateUponSelect}','{!ObjectIDToUpdateUponSelect}',{!JavascriptCallbackFunction},'{!pasteSelectedIDToHTMLElement}', {!highlightValueAfterSelection}, {!PostIDUponSelect}, '{!OutputFields}', '{!sourceobject}', {!enforceNonNullAddValues}, "{!addNewPrompt}" );}
function cluCan_{!cluID}() { var txt=ge('{!cluID}_cluSearchText'); if (txt!=null) { txt.focus(); txt.select();} }
function clucb_{!cluID}(){
  var elemCurrRow = ge("{!cluID}_selected_row"); var sID = '{!cluID}_ID_r'+elemCurrRow.value; var elemID = ge(sID); var sValID = '{!cluID}_VAL_r'+elemCurrRow.value;
  var sSelectedID = ""; if (elemID != null) sSelectedID=elemID.value; var bAddNewCalled = false; var elemVal = ge(sValID);
  var txt=ge('{!cluID}_cluSearchText');var tV=txt.value; var btn=ge('{!cluID}_ToggleButton');
  ge('{!cluID}_list_div').style.visibility='hidden';  var el2 = ge('{!cluID}_updatedID'); if (el2!=null) el2.value = sSelectedID;
  if ({!IncludeAddNewOption} && sSelectedID=='-1000')  {bAddNewCalled = true; promptUserNoSelect(null,'{!AddNewPrompt}',tV,'Add New Value',cluAddSetup_{!cluID}, cluCan_{!cluID},0,0);}
  else if (elemVal!=null||(elemVal==null && tV== '')) { if ({!pasteSelectedToSearchText}) txt.value = (elemVal!=null?elemVal.value:tV); btn.value=(elemVal!=null?elemVal.value:tV); ToggleCLUButton('ON','{!cluID}_ToggleButton','{!cluID}_cluSearchText','{!cluID}_status'); }
  <apex:repeat value="{!ListOfOne}" var="x" rendered="{!HighlightValueAfterSelection}">txt.select();</apex:repeat>
  <apex:repeat value="{!ListOfOne}" var="x" rendered="{!IF(PasteSelectedIDToHTMLElement!=null && PasteSelectedIDToHTMLElement!='',true, false)}">ge('{!PasteSelectedIDToHTMLElement}').value=(elemID!=null? elemID.value:'');</apex:repeat>
  var bPostUpdateCalled = false;
  <apex:repeat value="{!ListOfOne}" var="x" rendered="{!IF(ObjectFieldToUpdateUponSelect!=null && ObjectFieldToUpdateUponSelect!='' && ObjectIDToUpdateUponSelect!=null && ObjectIDToUpdateUponSelect!='' && ObjectTypeToUpdateUponSelect!=null && ObjectTypeToUpdateUponSelect!='',true, false)}">
      if (!bAddNewCalled ) { cluPostUpdate('{!cluID}',(elemID!=null?elemID.value:''), txt.value,'{!ObjectFieldToUpdateUponSelect}','{!ObjectTypeToUpdateUponSelect}','{!ObjectIDToUpdateUponSelect}', {!JavascriptCallbackFunction},'{!pasteSelectedIDToHTMLElement}', {!ClearBoxAfterSelect}, {!PostIDUponSelect}); bPostUpdateCalled = true;}
  </apex:repeat>
  if (!bAddNewCalled && !bPostUpdateCalled) {<apex:repeat value="{!ListOfOne}" var="x" rendered="{!IF(JavascriptCallbackFunction!=null && JavascriptCallbackFunction!=''  && JavascriptCallbackFunction!='null',true,false)}">if (elemID != null) { s=elemID.value; {!JavascriptCallbackFunction}(s{!javascriptCallBackFunctionParmsString})};</apex:repeat>}
  if ({!ClearBoxAfterSelect}) clear_clu('{!cluID}');
}    
function clukdp_{!cluID}(evt,sActionType,lMinKeyStrokes){ if (evt.keyCode == 9  ) { clukp_{!cluID}(evt,sActionType,lMinKeyStrokes); return ; }}
function clukp_{!cluID}(evt,sActionType,lMinKeyStrokes){  
  var sVal = getValueFromEvent(evt); var menu= ge('{!cluID}_list_div'); var bMenuDropped = false; if ( menu != null && menu.style.visibility=="visible") bMenuDropped=true;
  if (bMenuDropped == true  && (evt.keyCode == 13  ) )         { clucb_{!cluID}(); return ; }
  if (evt.keyCode == 40 || evt.keyCode == 38)   { processNavigation(evt.keyCode, '{!cluID}'); return; }
  var bProcessKeystroke=checkIfCLUKeyShouldBeProcessed(evt.keyCode,'{!cluID}',sVal,lMinKeyStrokes,'{!cluID}_list_div','{!cluID}_cluSearchText','{!cluID}_status',false);
  if (bProcessKeystroke  &&  (sActionType == "per-keystroke") ||   (sActionType == "on-enter" && (evt.keyCode == 13  || evt.keyCode == 9  ))) {
  if (evt.keyCode == 13 && sVal=='') {clucb_{!cluID}(); return;}
  if (sVal.length >= lMinKeyStrokes) { var elSrch = ge('{!cluID}_cluSearchText');
     ge('{!cluID}_cluSearchText').focus();
    <apex:repeat value="{!ListOfOne}" var="x" rendered="{!IF(funcQuery!=null && funcQuery!='',true, false)}">
       cluSearchFunc('{!cluID}',elSrch.value,{!RowLimit},{!IncludeAddNewOption},  '{!SourceObject}','{!OutputFields}','{!FilterField}','{!OrderByField}','{!AdditionalWhereClause}','{!RequiredItems}',{!FilterRequiredItems}, clucb_{!cluID},{!funcQuery},{!defaultSelectedItem});
     </apex:repeat>    
  <apex:repeat value="{!ListOfOne}" var="x" rendered="{!IF(funcQuery==null || funcQuery=='',true, false)}">
     cluSearchFunc('{!cluID}',elSrch.value,{!RowLimit},{!IncludeAddNewOption}, '{!SourceObject}','{!OutputFields}','{!FilterField}','{!OrderByField}','{!AdditionalWhereClause}','{!RequiredItems}',{!FilterRequiredItems}, clucb_{!cluID},null,{!defaultSelectedItem});
  </apex:repeat> } } if (bMenuDropped && menu!=null) menu.style.visibility="hidden"; return true;    }
</script>
</apex:component>