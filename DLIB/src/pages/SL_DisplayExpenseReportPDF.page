<apex:page standardController="pse__Expense_Report__c" showHeader="false" sidebar="false" standardStylesheets="false" extensions="SL_DisplayExpenseReportPDF">

<!-- <canvas id="the-canvas" style="border:1px solid black"></canvas> -->
  
  <!-- Use latest PDF.js build from Github -->
  <apex:repeat value="{!lstAtt}" var="att">
  	<h2>{!att.Name}</h2>
  	<h3>{!att.pse__Amount__c}</h3>
	  <div style="width:1275;height:1650;">
	  <apex:repeat value="{!att.attachments}" var="oneAtt">
		<img src="/servlet/servlet.FileDownload?file={!oneAtt.Id}" style="display:block;max-width:1000px;max-height:1400px;width: auto;height: auto;"/>
	  </apex:repeat>
	  </div>
  </apex:repeat>

</apex:page>

<!--
  <script type="text/javascript" src="{!URLFOR($Resource.jsPDF, 'hpdf.min.js')}"></script>
   <script src="https://code.jquery.com/jquery-2.1.0.min.js"></script>
  <script type="text/javascript" src="https://rawgithub.com/mozilla/pdf.js/gh-pages/build/pdf.js"></script>
  
  <script type="text/javascript">
    //
    // NOTE:
    // Modifying the URL below to another server will likely *NOT* work. Because of browser
    // security restrictions, we have to use a file server with special headers
    // (CORS) - most servers don't support cross-origin browser requests.
    //

    function convertDataURIToBinary(base64) {
	  // var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
	  // var base64 = dataURI.substring(base64Index);
	  var raw = window.atob(base64);
	  var rawLength = raw.length;
	  var array = new Uint8Array(new ArrayBuffer(rawLength));
	 
	  for(i = 0; i < rawLength; i++) {
	    array[i] = raw.charCodeAt(i);
	  }
	  return array;
	}

    // var url = 'https://silverline--psadev.cs14.my.salesforce.com/servlet/servlet.FileDownload?file=00Pc0000000nhJN';
    

    var imgString;
    images = [];
    var img;
    //
    // Disable workers to avoid yet another cross-origin issue (workers need the URL of
    // the script to be loaded, and dynamically loading a cross-origin script does
    // not work)
    //
    PDFJS.disableWorker = true;

 

 
    //
    // Asynchronous download PDF as an ArrayBuffer
    //
	var atts;
	SL_DisplayExpenseReportPDF.getAttachments('{!$CurrentPage.parameters.Id}', function(result) {
		atts = result;
		for (var i = 0; i < atts.length; i++) {
			SL_DisplayExpenseReportPDF.getBody(atts[i].Id, function(aBody) {
			    PDFJS.getDocument(convertDataURIToBinary(aBody)).then(function getPdfHelloWorld(pdf) {
			      //
			      // Fetch the first page
			      //

					for (var i = 0; i < pdf.numPages; i++) {
						pdf.getPage(1).then(function getPageHelloWorld(page) {
					        var scale = 1.0;
					        var viewport = page.getViewport(scale);

					        //
					        // Prepare canvas using PDF page dimensions
					        //
					        var canvas = document.getElementById('the-canvas');
					        var context = canvas.getContext('2d');
					        canvas.height = 1650;
					        canvas.width = 1275;

					        //
					        // Render PDF page into canvas context
					        //
					        page.render({canvasContext: context, viewport: viewport});
					        imgString = canvas.toDataURL('image/jpeg', 0.75);
					        img = context.getImageData(0,0,canvas.width,canvas.height);
					        
 							// doc.save('Test.pdf');

				      });
					};
					
			    });				
			});
		};
	});
	function save() {
		// var doc = new jsPDF();
		// doc.addImage(imgString, 'JPEG',60,50);
		// doc.save();
			var pdf = new HPDF();
			pdf.setCompressionMode('a'); // HPDF_COMP_ALL
			  var page = pdf.addPage();

		  page.setWidth(550);
		  page.setHeight(650);
 		var _img = pdf.loadPngImageFromStream(img);
		page.drawImage(_img,0,0,_img.width(), _img.height());
		window.open(pdf.toDataUri());
		pdf.free();
	}
  </script>

-->