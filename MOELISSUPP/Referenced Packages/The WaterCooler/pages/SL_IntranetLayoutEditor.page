<apex:page sidebar="false" standardstylesheets="false" showheader="false" controller="SLSI.SL_IntranetLayoutEditorController">

	<head>
		<script src="{!URLFOR($Resource.SL_ExtJS,'/ext-4.2.1.883/jquery-10.2.js')}"></script>
    	<script src="{!URLFOR($Resource.SL_ExtJS,'/ext-4.2.1.883/jquery-ui.js')}"></script>
		
		<style type="text/css">
			
			#table_container table { border: 1px solid black;float:left;width:400px;}
			#table_container td, #table_container th   { border: 1px solid black;}
			 
			td.drop-target-hover {
			    border-color: yellow !important;
			    border-width: 3px !important;
			}
			
			p {
			    margin:5px;
			}
			
			.settings {
			    background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/folder_wrench.png')});
			}
			
			.nav {
			    background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/folder_go.png')});
			}
			
			.info {
			    background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/information.png')});
			}
			
			#options-toolbar{
				display: none;
			}
			
			.config-block{
				min-width: 800px;
			}
			
			.widget{
	    		min-height:40px;
	    		border: 1px solid;
	    		text-align:center;
	    		cursor: move;
	    		background-color: #add2ed;
	    		color: #157fcc;
				font-weight: bold;
	    	}
	    	
	    	.widget:hover {
	    		background-color: #50A4E0;
	    		color: white;
	    		box-shadow: -2px 10px 10px 0px #888888;
	    	}
	    	
	    	.activeWidget:hover {
	    		background-color: #1A82CE;
	    	}
	    	
	    	.widgetSelected {
	    		min-height:40px;
	    		border: 1px solid #ddd;
	    		text-align:center;
	    		background-color: #add2ed;
	    		margin-bottom: 1px;
	    		color: #157fcc;
				font-weight: bold;
				cursor: context-menu;
	    	}
	    	
	    	.activeWidget {
	    		background-color: #1A82CE;
	    		min-height:40px;
	    		border: 1px solid;
	    		text-align:center;
	    		cursor: move;
	    		color: white;
				font-weight: bold;
	    	}
	    	
	    	.widget span{
	    		-webkit-touch-callout: none;
				-webkit-user-select: none;
				-khtml-user-select: none;
				-moz-user-select: -moz-none;
				-ms-user-select: none;
				user-select: none;
	    	}
	    	
	    	.config-block .header, .config-block .top, .config-block .navBar, .config-block .banner, .config-block .footer{
				height: 50px;
	    	}
	    	
	    	.config-block .left{
	    		width : 24%;
	    		min-width: 126px;
	    		height:250px;
	    		float: left;
	    	}
	    	
	    	.config-block .main{
	    		width : 50.5%;
	    		min-width: 276px;
	    		height:250px;
	    		float: left;
	    	}
	    	
	    	.config-block .right{
	    		width : 24%;
	    		min-width: 126px;
	    		height:250px;
	    		float: right;
	    	}
	    	
	    	.widgetSelected span{
	    		-webkit-touch-callout: none;
				-webkit-user-select: none;
				-khtml-user-select: none;
				-moz-user-select: -moz-none;
				-ms-user-select: none;
				user-select: none;
	    	}
	    	
	    	.x-table-layout{
	    		width:100%;
	    	}
	    	
	    	.removeWidget{
	    		width:16px;
	    		height:16px;
	    		visibility:hidden;
	    		cursor: pointer;
	    		background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/delete.gif')});
	    		background-repeat:no-repeat;
	    	}
	    	
	    	.widgetSelected:hover .removeWidget{
	    		visibility:visible;
	    	}
	    	
	    	.widget-region-hover{
	    		background-color: red;
	    	}
	    	
	    	.x-fieldset {
	    		position: inherit;
	    		border-color: #157fcc;
	    	}
	    	
	    	.x-fieldset-header-text{
	    		color: #157fcc;
				font-weight: bold;
	    	}
		</style>
		
		<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/ext.js')}" />
		<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/examples/shared/include-ext.js')}" />
		<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/examples/shared/options-toolbar.js')}" />
		
		<script type="text/javascript">
		    var waitingLoader;
		    var vTabViewed = document.location.hash;
		   
			var vTabIndex = 0;
			var vTabName = document.location.href;

		    if(vTabName.indexOf('#') != -1)
		    {
		    	vTabName = vTabName.substring(vTabName.indexOf('#') + 1, vTabName.length);
		    	if(vTabName == 'Desktop')
		    		vTabIndex = 0;
		    	else if(vTabName == 'Mobile')
		    		vTabIndex = 1;
		    	else if(vTabName == 'Global')
		    		vTabIndex = 2;
		    }	
			else
		    	vTabIndex = 0;
		    	
		    vTabIndex = parseInt(vTabIndex);
		    
		    var vArrAllPage = new Array();
		    var vArrAllPageTemp = new Array();
		    var vAllPages = '{!JSENCODE(strAllPages)}';
		    vArrAllPageTemp = vAllPages.split(';');
	        for(var i=0; i<vArrAllPageTemp.length; i++)
	        	vArrAllPage.push(vArrAllPageTemp[i].trim());
	        
	        
	        /*** Start : Creating map for widget configuration and function for setting those values ***/
	        
			var WIDGETCONFIGURATION = Ext.create(Ext.grid.PropertyGrid, {
		        id : 'configId',
		        source: { },
		        setSourceData: function(data) {
		            this.setSource( data );
		            if(JSON.stringify(data) == 'null')
		            	this.down('#saveButton').disable();
		            else
		            	this.down('#saveButton').enable();	
		        },
		        dockedItems: 
			    [{ 
			        xtype: 'toolbar',
			        dock: 'bottom',
			        itemId: 'saveButton',
			        disabled: true,
			        ui: 'footer',
			        items: ['->', {
			            text: 'Save Configuration',
			            handler: function(){
			            	waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Saving Configuration. Please wait..."});
							waitingLoader.show();
			            	var gridvalues = this.up('propertygrid').getSource();
			            	document.getElementById('config'+vSelectedWidgetId).innerHTML = JSON.stringify(gridvalues);
			            	Visualforce.remoting.Manager.invokeAction(
			            		'{!$RemoteAction.SL_IntranetLayoutEditorController.updateWidgetConfiguration}',
			            		 vSelectedWidgetId, 
			            		 vSelectedWidgetType,
			            		 JSON.stringify(gridvalues), 
			            		 function(result, event){if(!event.status) alert(event.message); else waitingLoader.hide();}			            		 
			            	);
			            }
			        }]
			    }]
		    });
		    
		    function showDefaultWidgetConfiguration(wID, wType)
		    {
		    	WIDGETCONFIGURATION.setSourceData(eval ("(" + $('#config'+wID).text() + ")"));
    			vSelectedWidgetId = wID;
    			vSelectedWidgetType = wType;	
		    } 
		    
		    /*** End : Creating map for widget configuration and function for setting those values ***/
		    
						        
		    Ext.require(['*']);
		    
			/*** Start : Drag-Drop functionality from Available Widgets to its corresponding Regions ***/
			
			//Drag functionality
			function initializeWidgetDragZone(v) {
			    v.dragZone = Ext.create('Ext.dd.DragZone', v.getEl(), {
			        getDragData: function(e) {
			            var sourceEl = e.getTarget(v.itemSelector, 10), d;
			            if (sourceEl) {
			                d = sourceEl.cloneNode(true);
			                d.id = Ext.id();
			                return (v.dragData = {
			                    sourceEl: sourceEl,
			                    repairXY: Ext.fly(sourceEl).getXY(),
			                    ddel: d,
			                    widgetData: v.getRecord(sourceEl).data
			                });
			            }
			        },
			
			        getRepairXY: function() {
			            hideHighlightedRegions();
			            return this.dragData.repairXY;
			        }
			    });
			}

			//Drop functionality
			function initializeWidgetDropZone(v) {
			    var vDropPosition;
			    
			    v.dropZone = Ext.create('Ext.dd.DropZone', v.getEl(), {
			        getTargetFromEvent: function(e) {
		            	if(e.getTarget('.region-target') && e.getTarget('.region-target').allowWidgetDrop === 'true')
		            	{
		            		$("#"+e.getTarget('.region-target').id + " div.widgetSelected").mouseover(function () {
							    vDropPosition = $(this).index();
							});
							
							$("#"+e.getTarget('.region-target').id + " div.dummyDivT").mouseover(function () {
							    vDropPosition = 0;
							});
							
							$("#"+e.getTarget('.region-target').id + " div.dummyDivB").mouseover(function () {
							    vDropPosition = -1;
							});

		            		return e.getTarget('.region-target');
		            	}	
		            	else
							vDropPosition = null;
			        },
			
			        onNodeOver : function(target, dd, e, data){
			            if(target.allowWidgetDrop === 'true')
			            	return Ext.dd.DropZone.prototype.dropAllowed;
			        },
			
			        onNodeDrop : function(target, dd, e, data){
			            if(target.allowWidgetDrop === 'true')
			            {
				            var vReferenceNode;
				            var vTarget = $("#"+target.id + " .x-fieldset-body .x-component");
				            vTarget = vTarget[0];
				            
				            if((vDropPosition || vDropPosition == 0) && vDropPosition != -1)
				            	vReferenceNode = vTarget.childNodes[vDropPosition+1];
				            else
				            	vReferenceNode = vTarget.childNodes[vTarget.childNodes.length-1];

				            var vDroppedItem = dd.dragData.ddel; 
				            var strCls = vDroppedItem.className; 
				            vDroppedItem.onmousedown = activeWidget;
				            vDroppedItem.onmouseup = null;
				            
				            if(strCls.indexOf("activeWidget") != -1)
				            	strCls = strCls.replace("activeWidget", '');
				            
				            if(strCls.indexOf("widget") != -1)
				            	strCls = strCls.replace("widget", "widgetSelected");	
				           
				            vDroppedItem.className = strCls;
				            
				            vDroppedItem.setAttribute('existingWidget', 'false');
				            
				            if(vReferenceNode)
				            	vTarget.insertBefore(vDroppedItem, vReferenceNode);
				            else
				            	vTarget.appendChild(vDroppedItem);
				            
				            hideHighlightedRegions();
				            
				            return true;
			            }
			        }
			    });
			}
			
			/*** End : Drag-Drop functionality from Available Widgets to its corresponding Regions ***/
			
			
			/*** Start :  Method will be called on ready and create the required component in the DOM **/
			
		    Ext.onReady(function() {
				
				loadDOMElements();

			    arrangeLayouts();
			});
			
			/*** End :  Method will be called on ready and create the required component in the DOM ***/
			
			
			/*** Start :  Method is used to display modal window for create new page functionality ***/
			
			function showCreateNewPageForm() {
		        var win;
		        if (!win) {
		            var layouts = Ext.create('Ext.data.Store', { 
					    fields: ['abbr', 'name'],
					    data :	eval ("(" + '{!JSENCODE(jsonAllLayouts)}' + ")")
					});
					
				    var EXITING_LAYOUTS = Ext.create('Ext.form.ComboBox', {
					    fieldLabel: 'Select Layout',
					    store: layouts,
					    name: 'newPageLayout',
					    queryMode: 'local',
					    displayField: 'name',
					    value: "{!JSENCODE(strCurrentPageLayout)}",
					    editable: false,
					    valueField: 'abbr',
					});
					
		            var form = Ext.widget('form', {
		                layout: {
		                    type: 'vbox',
		                    align: 'stretch'
		                },
		                border: false,
		                bodyPadding: 10,
		
		                fieldDefaults: {
		                    labelAlign: 'top',
		                    labelWidth: 100,
		                    labelStyle: 'font-weight:bold'
		                },
		                items: [{
		                    xtype: 'textfield',
		                    fieldLabel: 'Page Name',
		                    name: 'newPageName',
		                    allowBlank: false,
		                    emptyText : 'Enter unique page name',
		                    validator: function(value){
						        var vErrorFound = false;
						        for(var i=0; i<vArrAllPage.length; i++)
						        {
						        	if(value.trim().toLowerCase() == vArrAllPage[i].toLowerCase())
						        	{
						        		vErrorFound = true;
						        		break;
						        	}	
						        }

						        if(vErrorFound) 
						            return 'Error! Duplicate page name found.';
						        else if(value.trim().length < 2 && value.trim().length > 0)
						        	return 'Error! Enter minimum 2 character.';    
						        else 
						            return true;
						    }
		                	},
		                	EXITING_LAYOUTS
		                ],
		
		                buttons: [{
		                    text: 'Save',
		                    handler: function() {
		                        var vPageName = this.up('form').down('textfield[name=newPageName]').getValue();  
		                        var vLayout = this.up('form').down('textfield[name=newPageLayout]').getValue();  
		                        if (this.up('form').getForm().isValid()) {
		                            this.up('form').getForm().reset();
		                            this.up('window').hide();
		                            waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Creating new page. Please wait..."});
									waitingLoader.show();
									
									Visualforce.remoting.Manager.invokeAction(
					            		'{!$RemoteAction.SL_IntranetLayoutEditorController.createNewPage}',
					            		 vPageName.trim(), 
					            		 vLayout, 
					            		 document.location.hash,
					            		 function(result, event){if(!event.status) alert(event.message); else {
				            		    	window.location.replace(result);
           		 							waitingLoader.hide(); 
					            		 }}			            		 
					            	);
		                        }
		                    }
		                },{
		                    text: 'Cancel',
		                    handler: function() {
		                        this.up('form').getForm().reset();
		                        this.up('window').hide();
		                    }
		                }]
		            });
		
		            win = Ext.widget('window', {
		                title: 'Create New Page',
		                width: 500,
		                height: 250,
		                layout: 'fit',
		                resizable: true,
		                modal: true,
		                items: form
		            });
		        }
		        win.show();
		    }
		    
		    /*** End :  Method is used to display modal window for create new page functionality ***/
			
			
			/*** Start :  Method is used to edit page name of selected page ***/
			
			function showEditPageForm() {
		        var win;
		        if (!win) {
		            var form = Ext.widget('form', {
		                layout: {
		                    type: 'vbox',
		                    align: 'stretch'
		                },
		                border: false,
		                bodyPadding: 10,
		
		                fieldDefaults: {
		                    labelAlign: 'top',
		                    labelWidth: 100,
		                    labelStyle: 'font-weight:bold'
		                },
		                items: [{
		                    xtype: 'textfield',
		                    fieldLabel: 'Page Name',
		                    name: 'editPageName',
		                    allowBlank: false,
		                    emptyText : 'Enter unique page name',
		                    value: '{!JSENCODE($CurrentPage.parameters.page)}',
		                    validator: function(value){
						        var vErrorFound = false;
						        for(var i=0; i<vArrAllPage.length; i++)
						        {
						        	if(value.trim().toLowerCase() == vArrAllPage[i].toLowerCase())
						        	{
						        		vErrorFound = true;
						        		break;
						        	}	
						        }

						        if(vErrorFound) 
						            return 'Error! Duplicate page name found.';
						        else if(value.trim().length < 2 && value.trim().length > 0)
						        	return 'Error! Enter minimum 2 character.';    
						        else 
						            return true;
						    }
		                	}
		                ],
		
		                buttons: [{
		                    text: 'Save',
		                    handler: function() {
		                        var vUpdatedPageName = this.up('form').down('textfield[name=editPageName]').getValue();  
		                        var vOldPageName = '{!JSENCODE($CurrentPage.parameters.page)}';
		                        if (this.up('form').getForm().isValid()) {
		                            this.up('form').getForm().reset();
		                            this.up('window').hide();
		                            waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Updating page name. Please wait..."});
									waitingLoader.show();
									
									Visualforce.remoting.Manager.invokeAction(
					            		'{!$RemoteAction.SL_IntranetLayoutEditorController.editPageName}',
					            		 vUpdatedPageName.trim(), 
					            		 vOldPageName.trim(),
					            		 document.location.hash,
					            		 function(result, event){if(!event.status) alert(event.message); else {
				            		 	 	window.location.replace(result);
           		 							waitingLoader.hide(); 
					            		 }}			            		 
					            	);
		                        }
		                    }
		                },{
		                    text: 'Cancel',
		                    handler: function() {
		                        this.up('form').getForm().reset();
		                        this.up('window').hide();
		                    }
		                }]
		            });
		
		            win = Ext.widget('window', {
		                title: 'Edit Page',
		                width: 500,
		                height: 180,
		                layout: 'fit',
		                resizable: true,
		                modal: true,
		                items: form
		            });
		        }
		        win.show();
		    }
		    
		    /*** End : Method is used to edit page name of selected page ***/
			

			/*** Start : load all document elements ***/
							
	        function loadDOMElements()
	        {
		        /*** Start : Creating records for all available widgets for Available Widgets section ***/
			    
			    Ext.define('Widget', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{
		        		name : 'regions'
		            },{
		        		name : 'widgetType'
		            }]
			    });

			    var widgetStore = Ext.create('Ext.data.Store', {
			        model: 'Widget',
			        data: eval ("(" + '{!JSENCODE(jsonAllWidgets)}' + ")")
			    });

			    var AVAILABLE_WIDGET_VIEW = Ext.create('Ext.view.View', {
			        tpl: '<tpl for=".">' +
			                '<div class="widget" id="{widgetId}" onmousedown="showWidgetInformation(this, \'{widgetType}\',\'{regions}\');" onmouseup="hideHighlightedRegions();" >'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height: 40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="$(this.parentNode.parentNode.parentNode.parentNode.parentNode).fadeOut(500, function(){ $(this).remove();});" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>',
			        itemSelector: 'div.widget',
			        singleSelect: true,
			        store: widgetStore,
			        listeners: {
			            render: initializeWidgetDragZone
			        }
			    });
			    
			    /**** End : Creating records for all available widgets for Available Widgets section ***/
			    
			    
			    /**** Start : Creating records for all existing widgets for their respective regions ***/
			    
			    //Header UserInfo Region widgets : HeaderUserInfo
			    Ext.define('WidgetHeaderUserInfo', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderUserInfo = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderUserInfo',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderUserInfo']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERUSERINFO = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderUserInfo
			    });
			    
			    //Header Logo Region widgets : HeaderLogoSection
			    Ext.define('WidgetHeaderLogoSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderLogoSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderLogoSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderLogoSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERLOGOSECTION = Ext.create('Ext.view.View', {
			        tpl: '<div class="dummyDivT" style="width:100%;height:10px;"></div>'+
			        	 '<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderLogoSection
			    });
			    
			    //Header Navigation Region widgets : HeaderNavigationSection
			    Ext.define('WidgetHeaderNavigationSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderNavigationSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderNavigationSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderNavigationSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERNAVIGATIONSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderNavigationSection
			    });
			    
			    //Banner Region widgets : BannerRegion
			    Ext.define('WidgetBannerRegion', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreBannerRegion = Ext.create('Ext.data.Store', {
			        model: 'WidgetBannerRegion',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['BannerRegion']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_BANNERREGION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreBannerRegion
			    });
			    
			    //Left Sidebar Region widgets : LeftSideBar
			    Ext.define('WidgetLeftSideBar', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftSideBar = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftSideBar',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftSideBar']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTSIDEBAR = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftSideBar
			    });
			    
			    //LeftMain Section widgets : LeftMainSection
			    Ext.define('WidgetLeftMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftMainSection
			    });
			    
			    //LeftHalf Section widgets : LeftHalfSection
			    Ext.define('WidgetLeftHalfSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftHalfSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftHalfSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftHalfSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTHALFSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftHalfSection
			    });
			    
			    //Main Section Region widgets : MainSection
			    Ext.define('WidgetMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMainSection
			    });
			    
			    //MainFull Section widgets : MainFullSection
			    Ext.define('WidgetMainFullSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMainFullSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMainFullSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MainFullSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MAINFULLSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMainFullSection
			    });
			    
			    //Right Sidebar Region widgets : RightSideBar
			    Ext.define('WidgetRightSideBar', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightSideBar = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightSideBar',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightSideBar']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTSIDEBAR = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightSideBar
			    });
			    
			    //RightMain Section widgets : RightMainSection
			    Ext.define('WidgetRightMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightMainSection
			    });
			    
			    //RightHalf Section widgets : RightHalfSection
			    Ext.define('WidgetRightHalfSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightHalfSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightHalfSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightHalfSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTHALFSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightHalfSection
			    });
			    
			    //Footer Region widgets : FooterSection
			    Ext.define('WidgetFooterSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreFooterSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetFooterSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['FooterSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_FOOTERSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreFooterSection
			    });
			    
			    //Existing widgets for Mobile section : MobileMainSection
			    Ext.define('WidgetMobileMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMobileMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMobileMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MobileMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MOBILEMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMobileMainSection
			    });
			    
			    /**** Start : Creating records for all existing widgets for their respective regions ***/
			    

			    /**** Start : Creating view for Mobile  ***/
			    
			    var MOBILE_REGION_VIEW = Ext.create('Ext.panel.Panel', {
				    title: 'Mobile',
				    width: '100%',
				    autoScroll: true,
				    id:'MobileView',
				    layout: {
				        type: 'table',
				        columns: 1
				    },
				    items: [{
				        xtype: 'fieldset',
				        columnWidth: 0.5,
				        id:'MobileMainSection',
				        title: 'Mobile Main Section',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'300px'},
				        items : [
				        	EXISTING_WIDGET_MOBILEMAINSECTION
				        ]
				    }],
				    listeners: {
			            render: initializeWidgetDropZone,
			            activate: function(tab){
	                        if(vTabViewed.indexOf('Mobile') == -1)
	                        	vTabViewed = vTabViewed + '#Mobile';
	                        window.location.hash = 'Mobile';
	                    }
			        }
				});
				
				/**** End : Creating view for Mobile  ***/
				
				
				/**** Start : Creating view for Desktop  ***/
			    
		        var DESKTOP_REGION_VIEW = Ext.create('Ext.panel.Panel', {
				    title: 'Desktop',
				    width: '100%',
				    autoScroll: true,
				    id:'DesktopView',
				    layout: {
				        type: 'table',
				        columns: 8
				    },
				    items: [{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'UserInfo Region',
				        id:'HeaderUserInfo',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERUSERINFO
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Logo Region',
				        id:'HeaderLogoSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERLOGOSECTION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Navigation Region',
				        id: 'HeaderNavigationSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERNAVIGATIONSECTION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Banner Region',
				        id:'BannerRegion',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_BANNERREGION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftSideBar',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTSIDEBAR
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftMainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTMAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftHalfSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTHALFSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Main Section',
				        id:'MainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_MAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Main Section',
				        id:'MainFullSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_MAINFULLSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightSideBar',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTSIDEBAR
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightMainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTMAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightHalfSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTHALFSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Footer Region',
				        id:'FooterSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_FOOTERSECTION
				        ]
				    }],
				    listeners: {
			            render: initializeWidgetDropZone,
			            activate: function(tab){
	                        if(vTabViewed.indexOf('Desktop') == -1)
	                        	vTabViewed = vTabViewed + '#Desktop';
	                        window.location.hash = 'Desktop';
	                    }
			        }
				});
				
				/**** End : Creating view for Desktop  ***/
		        
		        
		        // NOTE: This is an example showing simple state management. During development, it is generally best to disable state management as dynamically-generated ids
		        // can change across page loads, leading to unpredictable results.  The developer should ensure that stable state ids are set for stateful components in real apps.
		        
		        Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
				
				
				/*** Start : Select or Create new page ***/
				
			    var pages = Ext.create('Ext.data.Store', {
				    fields: ['abbr', 'name'],
				    data : eval ("(" + '{!JSENCODE(jsonAllPages)}' + ")")
				});
			    
			    var EXITING_PAGES = Ext.create('Ext.form.ComboBox', {
				    fieldLabel: 'Select Page',
				    store: pages,
				    queryMode: 'local',
				    value: "{!JSENCODE(strCurrentPage)}",
				    labelStyle : 'font-weight: bold;color: white;',
				    displayField: 'name',
				    editable: false,
				    valueField: 'abbr',
				    listeners: {
					    scope: this,
         				beforeselect: function(combo, records, index){
         					oldPageValue = combo.getRawValue();
         				},
         				select: function(combo, records, index){
         					newPageValue = combo.getRawValue();
         					Ext.Msg.show({
							     title:'Save Changes?',
							     msg: 'You are closing a page that has unsaved changes. Would you like to save your changes?',
							     buttons: Ext.Msg.YESNOCANCEL,
							     icon: Ext.Msg.QUESTION,
							     fn: function (btn) {
					                if (btn == 'yes') {
					                	saveWidgetConfiguration(newPageValue, oldPageValue, 'false');	//param : current page, old page, redirect to home
					                }
					                else if (btn == 'no') {
					                	window.location = 'SL_IntranetLayoutEditor?page='+newPageValue+document.location.hash;		
					                }
					                else if(btn == 'cancel') {
					                	combo.setValue(oldPageValue);
					                }
					             } 
							});
         				}
					}
				});
				
				/*** End : Select or Create new page ***/
				
				
				/*** Start : Creating buttons ***/
				
				var SAVE_CANCEL_DELETE_BUTTONS = Ext.create('Ext.Container', {
				    style:{"float":"right"}, 
				    items: [{
				        	xtype: 'button',
				            text : 'Save',
				            id: 'Save-Button',
						    handler: function() {
						        var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						        saveWidgetConfiguration(vCurrentPage, vCurrentPage, 'true'); //param : current page, current page, redirect to home
						    }
				        }, {
				        	xtype: 'button',
				            text : 'Quick Save',
				            margin: '0 5 0 5',
				            id: 'QSave-Button',
						    handler: function() {
						        var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						        saveWidgetConfiguration(vCurrentPage, vCurrentPage, 'false');	//param : current page, current page, redirect to home
						    }
				        }, {
				        	xtype: 'button',
				            text : 'Cancel',
				            id: 'Cancel-Button',
				            margin: '0 5 0 0',
						    handler: function() {
						        if('{!JSENCODE($CurrentPage.parameters.page)}' == 'Employee Profile')
						        	window.location.href = 'SL_Intranet?page='+'{!JSENCODE($CurrentPage.parameters.page)}' + '&id=' + '{!$User.Id}';
						        else
						        	window.location.href = 'SL_Intranet?page='+'{!JSENCODE($CurrentPage.parameters.page)}';	
						    }
				        }, {
				            xtype: 'button',
				            text : 'Delete',
				            id: 'Delete-Button',
						    handler: function() {
						    	Ext.Msg.show({
								     title:'Delete Page?',
								     msg: 'Are you sure want to delete this page?',
								     buttons: Ext.Msg.YESNO,
								     icon: Ext.Msg.QUESTION,
								     fn: function (btn) {
						                if (btn == 'yes') {
						                	var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						                	waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Deleting Page. Please wait..."});
											waitingLoader.show();
						                	
						                	Visualforce.remoting.Manager.invokeAction(
							            		'{!$RemoteAction.SL_IntranetLayoutEditorController.deleteExistingPage}',
							            		 vCurrentPage.trim(),
							            		 function(result, event){if(!event.status) alert(event.message); else {
						            		 	 	document.location.href = result; 
		           		 							waitingLoader.hide(); 
							            		 }}			            		 
							            	);
						                }
						             } 
								});
						    }	
				        }
				    ]
				});
				
				/*** End : Creating buttons ***/
				
				
				/*** Start : Create new page and Edit page button ***/
				
				var CREATENEW_BUTTON = Ext.create('Ext.Button', {
				    text: 'Create New Page',
				    margin : '0 0 0 10',
				    handler: function() {
				        showCreateNewPageForm();
				    }
				});
				
				var EDITPAGE_BUTTON = Ext.create('Ext.Button', {
				    text: 'Edit Page',
				    margin : '0 0 0 10',
				    //disabled: true,
				    handler: function() {
				        showEditPageForm();
				    }
				});
				
				/*** Start : Create new page and Edit page button ***/
				
				
				/**** Start : Creating view for Complete layout editor page  ***/
				
		        var viewport = Ext.create('Ext.Viewport', {
		            id: 'border-example',
		            layout: 'border',
		            items: [
			            // create instance immediately
			            Ext.create('Ext.container.Container', {
			                region: 'north',
			                layout: {
						        type: 'column'
						    },
			                style:{"margin":"10px"}, 
			                items: [	
			                	EXITING_PAGES,
			                	CREATENEW_BUTTON,
			                	EDITPAGE_BUTTON,
			                	SAVE_CANCEL_DELETE_BUTTONS
		                	]
			            }), {
			                region: 'south',
			                contentEl: 'south',
			                split: true,
			                height: 120,
			                minSize: 100,
			                maxSize: 200,
			                collapsible: true,
			                collapsed: false,
			                title: 'Widget Information',
			                autoScroll: true,
			                margins: '0 0 0 0'
			            }, {
			                region: 'east',
			                title: 'Widget Configuration',
			                id: 'east-panel',
			                animCollapse: true,
			                layout:'absolute',
			                collapsible: true,
			                split: true,
			                autoScroll: true,
			                width: 450, // give east and west regions a width
			                minSize: 200,
			                maxSize: 550,
			                margins: '0 5 0 0',
			                items: [
			                	WIDGETCONFIGURATION
	                    	]
		            	}, {
			                region: 'west',
			                stateId: 'navigation-panel',
			                id: 'west-panel',
			                title: 'Available Widgets',
			                split: true,
			                width: 200,
			                minWidth: 175,
			                maxWidth: 400,
			                collapsible: true,
			                animCollapse: true,
			                margins: '0 0 0 5',
			                autoScroll: true,
			                items: [
			                	AVAILABLE_WIDGET_VIEW
		                	]
		            	},
			           
			            // in this instance the TabPanel is not wrapped by another panel since no title is needed, this Panel is added directly as a Container
			            Ext.create('Ext.tab.Panel', {
			                region: 'center', // a center region is ALWAYS required for border layout
			                deferredRender: false,
			                activeTab: vTabIndex,     // first tab initially active
			                id: 'center-panel',
			                items: [
			                    DESKTOP_REGION_VIEW,
			                    MOBILE_REGION_VIEW
			               ]
		            	})
		            ]
		        });
		        
		        /**** End : Creating view for Complete layout editor page  ***/
		    }
		    
		    /*** End : load all document elements ***/
		    
		    
		    /*** Start : this section is used to render page according to corresponding layout ***/
		    
		    function arrangeLayouts()
		    {
				if("{!JSENCODE(strCurrentPageLayout)}" == '3 Column Layout Page')
				{
					document.getElementById('LeftSideBar').parentNode.style.width = '30%';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").parentNode.style.width = '40%';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById('RightSideBar').parentNode.style.width = '30%';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if("{!JSENCODE(strCurrentPageLayout)}" == '2 Column Layout Right Main Page')
				{
					document.getElementById("LeftSideBar").parentNode.style.width = '30%';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById('RightSideBar').style.display = 'none';
					document.getElementById('RightMainSection').parentNode.style.width = '70%';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if("{!JSENCODE(strCurrentPageLayout)}" == '2 Column Layout Left Main Page')
				{
					document.getElementById('LeftSideBar').style.display = 'none';
					document.getElementById('LeftMainSection').parentNode.style.width = '70%';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById("RightSideBar").parentNode.style.width = '30%';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if("{!JSENCODE(strCurrentPageLayout)}" == '2 Column Layout Half Page')
				{
					document.getElementById("LeftSideBar").style.display = 'none';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').parentNode.style.width = '50%';
					document.getElementById('MainSection').style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById("RightSideBar").style.display = 'none';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').parentNode.style.width = '50%';
				}
				else if("{!JSENCODE(strCurrentPageLayout)}" == '1 Column Layout Page')
				{
					document.getElementById('LeftSideBar').style.display = 'none';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").parentNode.style.width = '100%';
					document.getElementById('RightSideBar').style.display = 'none';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
		    }
		    
		    /*** End : this section is used to render page according to corresponding layout ***/
		    
		    var vPoosibleRegions = new Array('HeaderUserInfo','HeaderLogoSection','HeaderNavigationSection',
				'BannerRegion','LeftSideBar','MainSection','RightSideBar','FooterSection','MobileMainSection',
				'LeftMainSection','RightMainSection','LeftHalfSection','RightHalfSection','MainFullSection');

		    function showWidgetInformation(divId, widgetType, regions)
		    {
		    	document.getElementById('south').innerHTML = '<pre style="white-space: pre-line;">' + document.getElementById(widgetType).innerHTML + '</pre>';

		    	showHighlightedRegions(regions);
		    	
		    	activeWidget(divId);
		    }
		    
		    function showHighlightedRegions(regions)
		    {
		    	for(var i=0; i<vPoosibleRegions.length; i++)
	    		{
   					document.getElementById(vPoosibleRegions[i].trim()).style.background = '';
   					document.getElementById(vPoosibleRegions[i].trim()).allowWidgetDrop = 'false';
	    		}
		    	
		    	if(regions != null && regions != '')
		    	{
		    		var vRegions = new Array();
		    		vRegions = regions.split(';');
		    		for(var i=0; i<vRegions.length; i++)
		    		{
	    				if(vPoosibleRegions.indexOf(vRegions[i].trim()) > -1)
	    				{
	    					document.getElementById(vRegions[i].trim()).style.background = 'lightyellow';
	    					document.getElementById(vRegions[i].trim()).allowWidgetDrop = 'true';
	    				}
		    		}
		    	}
		    }
		    
		    function hideHighlightedRegions() 
		    {
		    	for(var i=0; i<vPoosibleRegions.length; i++)
	    		{
   					document.getElementById(vPoosibleRegions[i].trim()).style.background = '';
   					document.getElementById(vPoosibleRegions[i].trim()).allowWidgetDrop = 'false';
	    		}
		    }
		    
		    function removeWidget(DivElement)
		    {
		    	var vParentDiv = DivElement.parentNode.parentNode.parentNode.parentNode.parentNode;
		    	WIDGETCONFIGURATION.setSourceData(null);
		    	$(vParentDiv).fadeOut(250, function(){ $(this).remove();});
		    }
		    
		    setTimeout(function(){
			    $(function() {
					$( ".region-target .x-fieldset-body .x-component" ).sortable({axis: "y" }, { containment: "parent" }, { items: ".widgetSelected" });
				});
			},2000)
			
			
			function saveWidgetConfiguration(nPage, oPage, redirectHome)
			{
				waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Saving Configuration. Please wait..."});
				waitingLoader.show();
				
				var vWidgetConfigurationJSON = [];
				var vSelectedWidgets = document.getElementsByClassName('widgetSelected');
				for(var i=0; i<vSelectedWidgets.length; i++)
				{
					var vWidgetId = vSelectedWidgets[i].getAttribute('existingWidget'); 
					if(vWidgetId === 'true')
						vWidgetId = vSelectedWidgets[i].id;
					else
						vWidgetId = 'null';
					
					var vParent = $("#"+vSelectedWidgets[i].id).closest("fieldset");
					var vWidgetType = $(vSelectedWidgets[i]).find(".hidden").val();
					vWidgetConfigurationJSON.push({name: vParent[0].id, widgetType: vWidgetType, widgetId: vWidgetId});
				}

				if(vTabViewed.indexOf('Desktop') != -1 && vTabViewed.indexOf('Mobile') == -1)
					vTabViewed = 'Desktop';
				else if(vTabViewed.indexOf('Desktop') == -1 && vTabViewed.indexOf('Mobile') != -1)
					vTabViewed = 'Mobile';
				else if(vTabViewed.indexOf('Desktop') != -1 && vTabViewed.indexOf('Mobile') != -1)
					vTabViewed = 'All';
							
				Visualforce.remoting.Manager.invokeAction(
            		'{!$RemoteAction.SL_IntranetLayoutEditorController.saveWidgetConfigurations}',
            		 JSON.stringify(vWidgetConfigurationJSON),
            		 nPage,
            		 oPage,
            		 redirectHome, 
            		 document.location.hash,
            		 vTabViewed,
            		 function(result, event){if(!event.status) alert(event.message); else {
            		    if(result.indexOf('#') != -1 && nPage == oPage)
            		    {
            		    	window.location.href = result;
            		    	window.location.reload();
            		    }
            		    else
            		    	window.location.href = result;

            		 	waitingLoader.hide(); 
            		 }}			            		 
            	);
			} 
			
			function activeWidget(divId)
			{
				if(!divId.id)
					divId = this;

				if(divId.className.indexOf('widgetSelected') != -1 )
				{
					showDefaultWidgetConfiguration(divId.id, 'PageRegionWidget');
					document.getElementById('south').innerHTML = '<pre style="white-space: pre-line;">Select Widget from Available Widgets section to see the information about Widget.</pre>';
				}	
				else if(divId.className.indexOf('widget') != -1)	
					showDefaultWidgetConfiguration(divId.id, 'Widget');
					
				var vSelectedWidgets = document.getElementsByClassName('activeWidget');
				for(var i=0; i<vSelectedWidgets.length; i++)
				{
					$("#"+vSelectedWidgets[i].id).removeClass('activeWidget');
				}
				
				$(divId).addClass('activeWidget');
			}
			
	    </script>
	    
	</head>
	
	<body>
	
	    <div id="west" class="x-hide-display">
	    	
	    </div>

	    <div id="center1" class="x-hide-display">
	       	
	       	<div class="config-block">
			
			</div>
	    </div>

	    <div id="center2" class="x-hide-display">
	    
	    </div>
	    
	    <div id="props-panel" class="x-hide-display" style="width:200px;height:200px;overflow:hidden;"></div>
	    
	    <div id="south" class="x-hide-display">
	        <pre style="white-space: pre-line;">This section will display selected Widget information.</pre>
	    </div>
	    
	    <div style="left:-99999px;position: fixed;">
		    <apex:repeat value="{!mapWidgetDescription}" var="v">
		    	<div id="{!v}">{!mapWidgetDescription[v]}</div>
		    </apex:repeat>
	    </div>
	    
	    <div style="left:-99999px;position: fixed;">
		    <apex:repeat value="{!mapDefaultWidgetConfiguration}" var="v">
		    	<div id="config{!v}">{!mapDefaultWidgetConfiguration[v]}</div>
		    </apex:repeat>
	    </div>
    
	</body>
	
</apex:page>