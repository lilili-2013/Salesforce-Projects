<apex:page controller="rels.RSBulkMatcherController"
sidebar="false" 
contentType="text/html"
tabStyle="RelSci__tab">
<style type="text/css">

._closeModal:hover
{
	cursor:pointer;}
.rsConfirm
{
    color:#015BA7;
    
}
.rsIncorrect
{
    color:#015BA7;
    
}
.rsRequestProfile
{
	color:#015BA7;
}
.rsOrgUrl
{
	font-size:10px;
	font-weight:lighter;
}
.ui-jqgrid
{
    border-bottom-left-radius: 15px !important;
    border-bottom-right-radius: 15px !important;
    border-top-right-radius: 15px !important;
    border-top-left-radius: 15px!important;
    border: 1px solid #ddd;

    margin: 10px;
}
.ui-jqgrid-titlebar
{

    font-size:14px !important;
    font-family:Arial,Helvetica,sans-serif;
    font-weight:bold;
    color:black !important;
    background:#f8f8f8 !important;

    padding-left: 10px !important;

    border-top-right-radius: 15px !important;
    border-top-left-radius: 15px !important;

    border-top: none;
    border-bottom: 1px solid #ddd !important;
}
.ui-jqgrid-sortable
{
	font-size:12px;
	color:black;
	font-family:Arial,Helvetica,sans-serif;
	font-weight:bold;
}
.ui-th-column
{
	background: #f3f3f3 !important;
}
.ui-dialog
{
	background: none !important;
	background-color: white !important;
	width: 406px !important;
	padding: 0 !important;
}
.ui-dialog-titlebar
{
  display:none;
}

.ui-widget-content .ui-state-hover
{
    background: #ddd !important;
    border: #f3f3f3 !important;
    color: #ddd !important;
}
.ui-widget-content .ui-state-highlight
{
    background: #ddd !important;
    border-color: #D5D5D5 !important;
}
.ui-widget-content
{
    background: #FFF !important;
}
.ui-jqgrid-sortable
{
    padding-left:10px !important;
    text-align: left !important;
}
.ui-jqgrid-pager
{
    border-top:none;
    border-bottom-right-radius: 15px !important;
    border-bottom-left-radius: 15px !important;
}
tr.ui-row-ltr td {
    padding-left: 10px !important;
}
.modalTitle
{
    font-size:16px;
    font-weight:bold;
    text-transform:uppercase;
} 

.syncResultNumbers
{
    color:red;
    font-size:14px;
}

.syncResultCategories
{
    color:#0973B4;
    font-size:14px;
}
.rsConfirm:hover
{
    text-decoration:underline;
    cursor:pointer;
}
.rsEntity
{
	/*font-family: 'ProximaNova-Bold', Arial, sans-serif;*/
}
.rsIncorrect:hover
{
    text-decoration:underline;
    cursor:pointer;
}
.rsRequestProfile:hover
{
    text-decoration:underline;
    cursor:pointer;
}
.rsIgnoreEntity
{
	color:#015BA7;
}
.rsIgnoreEntity:hover
{
	color:#015BA7;
	text-decoration:underline;
    cursor:pointer;
}
.rsEnableEntityMatching
{
	color:#015BA7;
}
.rsEnableEntityMatching:hover
{
	color:#015BA7;
	text-decoration:underline;
    cursor:pointer;
}
.rsProfileRequested
{
	color:green;
}
.statusText
{
	
	display:block;
	width:131px;	
	margin:0 auto;
	margin-bottom:25px;
}
.loader
{
	display:block;
	width:131px;
	height:45px;
	background-image:url('https://static.relsci.com/Content/Crm/Images/ajax-loader.gif');
	margin:0 auto;
	margin-bottom:5px;
}

.mini-loader
{
	display:inline-block;
	width:30px;
	height:25px;
	background-image:url('https://static.relsci.com/Content/Crm/Images/mini-loader.gif');
}
.pageTitle
{
	font-size:18px;
	font-font-family:Arial,Helvetica,sans-serif;;
	font-weight:bold;
	float: left;
}
.sfSearchBox
{
	float:right; 
	margin-right: 20px; 
	padding-left: 10px;

	border: 1px solid #ddd;

	border-bottom-left-radius: 15px;
    border-bottom-right-radius: 15px;
    border-top-right-radius: 15px;
    border-top-left-radius: 15px;
}

.rsArrow {
    position: absolute;
	background: #fff;
    overflow: visible;
}
.rsArrowRight:after, .rsArrowRight:before {
    left: 100%;
    top: 50%;
    border: solid transparent;
    content:"";
    height: 0;
    width: 0;
    position:absolute;
    pointer-events: none;
}
.rsArrowRight:after {
    border-color: rgba(255, 255, 255, 0);
	border-left-color: #ffffff;
	border-width: 10px;
	margin-top: -10px;
}
.rsArrowRight:before {
	border-color: rgba(78, 122, 49, 0);
	border-left-color: #ddd;
	border-width: 11px;
	margin-top: -11px;
}
.rsArrowLeft:after, .rsArrowLeft:before {
    right: 100%;
    top: 50%;
    border: solid transparent;
    content:"";
    height: 0;
    width: 0;
    position:absolute;
    pointer-events: none;
}
.rsArrowLeft:after {
    border-color: rgba(255, 255, 255, 0);
	border-right-color: #ffffff;
	border-width: 10px;
	margin-top: -10px;
}
.rsArrowLeft:before {
	border-color: rgba(78, 122, 49, 0);
	border-right-color: #ddd;
	border-width: 11px;
	margin-top: -11px;
}
.rsBreadcrumb {
	font-family:'Verdana','Geneva',sans-serif !important;
	font-size: 8px;
}
a.rsBreadcrumb {
	color:#015ba7;
	font-family:'Verdana','Geneva',sans-serif !important;
	font-size: 10px;
	text-align: left;
	text-decoration: none;
}
</style>
<div>
	<div class="pageTitle">RelSci Linking Manager</div>
	<div style="float:right;display:block;">
	
	<span id="matchInProgress" class=""></span>
	<apex:outputPanel rendered="{!ShowMatchLink}">
	<div>
	<button style="display:none;" type="button" id="_upload" value="Match All">Run Linking Process</button>
	</div>
	</apex:outputPanel>
	
	</div>
</div>
<br />
<br />
<div id="_loadingGridArea" style="margin:0 auto; width:250px;">

<p>Please Wait</p>
<img src="https://static.relsci.com/Content/Crm/Images/mini-loader.gif"></img>
</div>
<div class="rsBreadcrumb">&nbsp;&lt;&lt;&nbsp;<a class="rsBreadcrumb" href="/apex/Settings">Back to RelSci Admin Controls</a>
</div>
<div id="_rsEntityCardDialog"></div>
<div id="_relDetailsArrow" class="rsArrow rsArrowRight" style="display:none;"></div>
<div id="_gridArea" style="display:none;">
<table id="matchedDiv"></table>
<div id="matchedPager"></div>
<div id="matchedPct">
<span id="_allMatchedPct"></span> % of all accounts, contacts, opportunities and leads. 
    
<span id="_AutoMatchedPct"></span> % auto matched. 
       
<span id="_ConfirmedMatchPct"></span> % confirmed match. 
</div>
<br /><br />
<table id="possibleDiv"></table>
<div id="possiblePager"></div>
<div id="possiblePct">
<span id="_possibleMatchedPct"></span> % of all accounts, contacts, opportunities, and leads. 

</div>
<br /><br />
<table id="unmatchedDiv"></table>
<div id="unmatchedPager"></div>
<div id="unmatchedPct">
<span id="_unmatchedPct"></span> % of all accounts, contacts, opportunities, and leads. 

</div>
</div>

<apex:includeScript value="/soap/ajax/34.0/connection.js"/>
<apex:includeScript value="/soap/ajax/34.0/apex.js"/>
<link rel="stylesheet" type="text/css" media="screen" href="https://static.relsci.com/Content/Crm/ui.jqgrid.css" />
<link rel="stylesheet" type="text/css" media="screen" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.min.css" />
<script src="//static.relsci.com/Content/Crm/js/json2.min.js" type="text/javascript"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
<script src="https://static.relsci.com/Content/Crm/js/jquery.jqgrid.min.js"></script>
<script src="https://static.relsci.com/Content/Crm/js/grid.locale-en.js"></script>
<script src="https://www.relsci.com/scripts/jquery.hoverIntent.min.js"></script>
<script src="https://www.relsci.com/Content/bootstrap/js/bootstrap-tooltip.js"></script>
<script src="https://www.relsci.com/Content/bootstrap/js/bootstrap-popover.js"></script>
<link rel="stylesheet" type="text/css" href="https://www.relsci.com/Content/CRM/BaseballCardStyling.css" />

<script>

sforce.Transport = function(url) {
    this.url = url;
    this.connection = null;

    this.newConnection = function() {
        try {
            this.connection = new ActiveXObject('Msxml2.XMLHTTP');
        } catch(e) {
            try {
                this.connection = new ActiveXObject('Microsoft.XMLHTTP');
            } catch(e) {
                this.connection = new XMLHttpRequest();
            }
        }

        return this.connection;
    };
    
    this.send = function (envelope, callback, async, timeout) {
        this.newConnection();
        if (async) {
            this.connection.onreadystatechange = this.httpConnectionCallback;
        }
        var holder = new sforce.internal.ConnectionHolder(this.connection, callback);
        sforce.internal._connections.push(holder);
        this.connection.open("POST", this.url, async);
        this.connection.setRequestHeader("Content-Type", "text/xml; charset=UTF-8");
        this.connection.setRequestHeader("SOAPAction", "\"\"");
        this.connection.setRequestHeader("Accept", "text/xml");
     //   this.connection.setRequestHeader("User-Agent", "SFAJAX 1.0");
        this.connection.send(envelope);
        if (async && typeof(timeout) !== "undefined") {
            this.setTimeoutOn(holder, timeout);
        }
        if (!async) {
            this.httpConnectionCallback();
        }
    };
 
    this.setTimeoutOn = function (holder, timeout) {
        function abortConnection() {
            if (holder.connection.readyState !== 4) {
                holder.timedout = true;
                holder.connection.abort();
            }
        }
        setTimeout(abortConnection, timeout);
    };

    this.httpConnectionCallback = function () {

        for (var i = 0; i < sforce.internal._connections.length; i++) {
            var holder = sforce.internal._connections[i];
            if (holder !== null) {
                if (holder.timedout) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    holder.callback.httpCallback("Remote invocation timed out", false);
                } else  if (holder.connection.readyState == 4) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    var success = holder.connection.status == 200;
                    if (sforce.debug.trace) {
                        sforce.debug.log("Response : status - " + holder.connection.status);
                        sforce.debug.logXml(holder.connection.responseText);
                    }
                    if (sforce.debug.apexTrace) {
                        sforce.debug.logApex(holder.connection.responseText);
                    }
                    if (holder.connection.responseXML && holder.connection.responseXML.documentElement) {
                        holder.callback.httpCallback(holder.connection.responseXML.documentElement, success);
                    } else {
                        holder.callback.httpCallback("Remote invocation failed, due to: " + holder.connection.responseText +
                                                     " status code: ", holder.connection.status);
                    }
                }
            }
        }
    };
};
    
function init(){
sforce.connection.sessionId = "{!$Api.Session_ID}";
}
init();

function ObjectAndFields(type, fields, matchField, relsciIdField) {
	
	this.Type = type;	
	this.Fields = fields;
	this.MatchField = matchField;
	this.RelSciIdField = relsciIdField;
	
	this.Matched = [];
	this.Possible = [];
	this.Unmatched = [];
	
	this.ClearData = function () {
		this.Matched = [];
		this.Possible = [];
		this.Unmatched = [];
	}
	
	this.GetSOQL = function() {
		var s = 'select ' + this.Fields;

		return s + ' from '+this.Type;
	} 

};

var customObjectsAndFields = [
	/*{
		'Type':'rels__Customer__c',
		'Fields':['Id', 'Name', 'rels__Company__c', 'rels__EntityId__c', 'rels__MatchType__c'],
	},*/
]; 

var accountFieldsString = '{!AccountAccessibility} rels__EntityId__c, rels__MatchType__c';
var oppFieldsString = '{!OpportunityAccessibility} rels__EntityId__c, rels__MatchType__c';
var leadFieldsString = '{!LeadAccessibility} rels__EntityId__c, rels__MatchType__c';
var contactFieldsString = '{!ContactAccessibility} rels__EntityId__c, rels__MatchType__c';

var sfobjects = [];
sfobjects.push(new ObjectAndFields('Account', accountFieldsString, 'rels__MatchType__c', 'rels__EntityId__c'));
sfobjects.push(new ObjectAndFields('Contact', contactFieldsString , 'rels__MatchType__c', 'rels__EntityId__c'));
sfobjects.push(new ObjectAndFields('Lead', leadFieldsString, 'rels__MatchType__c', 'rels__EntityId__c'));
sfobjects.push(new ObjectAndFields('Opportunity', oppFieldsString, 'rels__MatchType__c', 'rels__EntityId__c'));

for(var i = 0; i < customObjectsAndFields.length; i++)
{
	sfobjects.push(new ObjectAndFields(customObjectsAndFields[i].Type, customObjectsAndFields[i].Fields, 'rels__MatchType__c', 'rels__EntityId__c'));
}




var AjaxUploads = 0;


function calculatePercentages()
{

	
	
	var matchedTotal = 	0;
	var possibleTotal = 0;
	var unmatchedTotal = 0;
	var total = 0;
	var automatchCount = 0;
	for(var i = 0; i < sfobjects.length; i++)
	{
		matchedTotal += sfobjects[i].Matched.length;
		possibleTotal += sfobjects[i].Possible.length;
		unmatchedTotal += sfobjects[i].Unmatched.length;
		
		
		
		for(var j = 0; j < sfobjects[i].Matched.length; j++)
		{
			if(sfobjects[i].Matched[j][sfobjects[i].MatchField] == '1')
			{
				automatchCount++;
			}
		}
		
	}
	total += unmatchedTotal + possibleTotal  + matchedTotal;
	  	
	
	var confirmedCount = matchedTotal - automatchCount;
	
	var unmatchedPct = (unmatchedTotal/total)*100;
	var possiblePct = (possibleTotal/total)*100;
	var automatchPct = (matchedTotal/total)*100;
	
	var confirmedPct = (confirmedCount/matchedTotal)*100;
	var automadePct = (automatchCount/matchedTotal)*100;
	
	jQuery("#_unmatchedPct").text(unmatchedPct.toFixed(2));
	jQuery("#_possibleMatchedPct").text(possiblePct.toFixed(2));
	
	jQuery("#_allMatchedPct").text(automatchPct.toFixed(2));
	jQuery("#_AutoMatchedPct").text(automadePct.toFixed(2));
	jQuery("#_ConfirmedMatchPct").text(confirmedPct.toFixed(2));
	
}
	    		 	    		 
_sfFetchObjects = false;
function GetSFData()
{	
	
	for(var i = 0; i < sfobjects.length; i++)
	{
		sfobjects[i].ClearData();
		GetSFObjects(sfobjects[i]);
	}
	
	
	_sfFetchObjects = true;	
	jQuery("#_upload").show();	
	
	
}	   
GetSFData(); 

function GetAllObjects()
{
	var allObjects = connection.describeGlobal();
	return allObjects;
}

function GetObjectFields(objectName)
{
	var result = sforce.connection.describeSObject(objectName);
    if (result.fields) 
    {
    	return result.fields;
	}
    return null;
}		  		 

function GetSFObjects(sfObject)
{	   
    var resultQuery = sforce.connection.query(sfObject.GetSOQL()); 
    var queryMore = true;
    
    while(queryMore) 
    {
    	var records = resultQuery.getArray("records");

        for(var i = 0; i < records.length; i++) 
        {
        	var r = records[i];
        	if(r[sfObject.RelSciIdField] == null || r[sfObject.RelSciIdField].length == 0 || r[sfObject.RelSciIdField] == -1)
        	{
        		sfObject.Unmatched.push(r);
        	}        	
        	else if( r[sfObject.RelSciIdField].indexOf(',') != -1) 
        	{
        		sfObject.Possible.push(r);
        	}
        	else if( r[sfObject.RelSciIdField].length > 0 && r[sfObject.RelSciIdField].indexOf(',') == -1 && r[sfObject.RelSciIdField] != -1)
        	{
        		sfObject.Matched.push(r);
        	}        	            
        }

        if(resultQuery.getBoolean("done")) 
        {
        	queryMore = false;
        } 
        else
        {
        	resultQuery = sforce.connection.queryMore(resultQuery.queryLocator);
        }
    }
}
AjaxUploads = 0; 
function SetupUpload(versionId)
{
	
	AjaxUploads = 0;
	jQuery("#_statusText").text('Sending data to RelSci');	
	for(var i = 0; i < sfobjects.length; i++)
	{
		var AttemptedMatch = [];
		for(var j = 0; j < sfobjects[i].Unmatched.length; j++)
		{
			if(sfobjects[i].Unmatched[j].rels__MatchType__c != '-1')
			{
				AttemptedMatch.push(sfobjects[i].Unmatched[j]);
			}
		}
		UploadToRelSci(AttemptedMatch, versionId);
	}
	
	tryPoll(versionId);
}

function tryPoll(versionId)
{
	
	if(AjaxUploads == 0)
	{
		poll(versionId);
	} else {
		setTimeout(function () {
			tryPoll(versionId);
		}, 2000);
	}
}

function UploadToRelSci(objectArray, versionId)
{
	
	
	var batchArray = [];
	for(var i = 0; i < objectArray.length; i++)
	{		
		if(i%500==0 && i != 0)
		{						
			Upload(batchArray, versionId);
			batchArray = [];
		}
		else
		{
			batchArray.push(objectArray[i], versionId);
		}		
	}
	if(batchArray.length > 0)
	{
		Upload(batchArray, versionId);
	}		
}

var SyncResultData = {};
function poll(versionId)
{
	
    
    var t = setTimeout(function() {
    	jQuery("#_statusText").text('Matching');
        var baseurl = "{!URLFOR($Page.RelSciSyncAjax)}";
        if(baseurl[baseurl.length-1] == "/")
        {
            baseurl = baseurl.substring(0,baseurl.length-2);
        }
        jQuery.ajax({
            type: 'POST',
            cache:false,
            url: baseurl,
            dataType: 'json',
            data: {
                SyncVersionId : versionId,
                csrf: '{!JSENCODE(csrf)}',
                action : 'poll'
                },           
            success: function(data) {
                if(data.PercentComplete == "100") {                                                            
                    SyncResultData = data;
                    var matchData = JSON.parse(data.Version);
                    jQuery("#_automatchCount").text(matchData.AutoMatchedCount);
                    jQuery("#_possibleCount").text(matchData.PossibleMatchedCount);
                    jQuery("#_unmatchedCount").text(matchData.UnmatchedCount);
                    SaveResults(versionId, 0, 100);
                    
                } else {
                	jQuery("#_statusText").text(data.Message);
                    setTimeout(function () {
                    	poll(versionId);
                    }, 20000);
                }
            },
            error: function(data) {
                PollError();
            }
        });
    }, 2000);
}

function SaveResults(versionId, skip, max)
{
	var baseurl = "{!URLFOR($Page.RelSciSyncAjax)}";
    if(baseurl[baseurl.length-1] == "/")
    {
        baseurl = baseurl.substring(0,baseurl.length-2);
    }
	jQuery("#_statusText").text('Saving Matches');
	jQuery.ajax({
       type: 'POST',
       cache:false,
       url: baseurl,
       dataType: 'json',
       data: {
           SyncVersionId : versionId,
           csrf: '{!JSENCODE(csrf)}',           
           skip: skip,
           max: max,
           action : 'saveresults'
           },
       success: function(data) {
       var count = parseInt(data.ResultsReceived);
       	if(count < max)
       	{
       		 //finished
       		 jQuery("#_statusText").text('Finished');
       		 jQuery("#_syncModal").show();
             jQuery("#_syncModalRunning").hide();
             jQuery("#_syncModalResults").show();
             _isMatching = false;       		 
       	} else {
       		//keep saving
       		SaveResults(versionId, parseInt(skip)+count, max);
       	}
       },
       error: function () {
       	jQuery("#_statusText").text('Error Saving');
       }
	});
}

function PollError() {
	jQuery("#_syncModalRunning").hide();
	jQuery("#_syncModalError").show();
}

function GetSyncVersion()
{	
	_isMatching = true;
	jQuery("#_statusText").text('Creating Sync');
	jQuery.ajax({
		cache:false,
		type:'post',
		url:'/apex/RelSciSyncAjax',
		data:{
			action: 'createSyncVersion',	
			csrf: '{!JSENCODE(csrf)}'	
		},
		dataType:'json',
		async: true,		
		success: function(data) {
			setTimeout(function () {
				SetupUpload(data.SyncVersionId);
			},3000);
		}
	});

}

function Upload(array, syncVersionId)
{
	var mobilecontacts = convertToMobileContacts(array);
	
	var baseurl = "{!URLFOR($Page.RelSciSyncAjax)}";
    if(baseurl[baseurl.length-1] == "/")
    {
        baseurl = baseurl.substring(0,baseurl.length-2);
    }

	jQuery.ajax({
		async: true,
		cache:false,		
		type: 'post',
		url: baseurl,
		data:{
			action: 'jsonupload',
			jsonContacts: JSON.stringify(mobilecontacts),
			syncVersionId: syncVersionId,
			csrf: '{!JSENCODE(csrf)}'
		} ,
	 beforeSend:function () {
			AjaxUploads++;
		},
			
		always: function () {
			AjaxUploads--;
		},
		success: function () {
			AjaxUploads--;
		},
		error: function() {
			AjaxUploads--;
		}
	});
}

function convertToMobileContacts(array)
{
	var mc = [];
	for(var i = 0; i < array.length; i++)
	{		
		var o = GetMobileContactFromSFObject(array[i]);				
		mc.push(o);
	}
	return mc;
}

function GetMobileContactFromSFObject(SFobject)
{
	var o = {
		Id:'',
		Name:'',
		Company:'',
		Title: '',
		Email: [],
		Domains: [],
		City: [],
		State: [],
		Zip: [],
		TickerSymbol:'',
		IsCompany:false
	};
		
		o.Id = SFobject.Id;
		if(SFobject.type == 'Opportunity')
		{
			
			
			if(SFobject.Account != null) 
			{
				o.Name = SFobject.Name;
				o.Company = SFobject.Account.Name;
				o.City.push(SFobject.Account.ShippingCity);
				o.State.push(SFobject.Account.ShippingState);
				o.Zip.push(SFobject.Account.ShippingPostalCode);
				o.Domains.push(SFobject.Account.Website);
				o.TickerSymbol = SFobject.Account.TickerSymbol;
			} else {
				o.Name = SFobject.Name;			
			}
			
		} else if(SFobject.type =='Account') {
			
			o.IsCompany = true;
			o.Id = SFobject.Id;
			o.Company = SFobject.Name;
			if(SFobject.ShippingCity != null)
			{
				o.City.push(SFobject.ShippingCity);
			}
			if(SFobject.ShippingState != null)
			{
				o.State.push(SFobject.ShippingState);
			}
			if(SFobject.ShippingPostalCode != null)
			{
				o.Zip.push(SFobject.ShippingPostalCode);
			}
			if(SFobject.TickerSymbol != null)
			{
				o.TickerSymbol = SFobject.TickerSymbol;
			}
			if(SFobject.Website != null)
			{
				o.Domains.push(SFobject.Website);
			}
			
		} else if(SFobject.type == 'Contact') {
		
			o.Name = SFobject.Name;
			o.Title = SFobject.Title;
			if(SFobject.Account != null)
				o.Company = SFobject.Account.Name;
			if(SFobject.Email != null)				
				o.Email.push(StripLocalEmail(SFobject.Email));
			if(SFobject.MailingCity != null)
				o.City.push(SFobject.MailingCity);
			if(SFobject.MailingState != null)
				o.State.push(SFobject.MailingState);					
			
			
		} else if(SFobject.type == 'Lead')	{
		
		
			o.Name = SFobject.Name;
			o.Title = SFobject.Title;
			o.Company = SFobject.Company;
			o.Domains.push(SFobject.Website);	
			if(SFobject.Email != null)		
				o.Email.push(StripLocalEmail(SFobject.Email));
			
			
		}
		
		return o;
}


function StripLocalEmail(email)
{
	var atindex = email.indexOf('@');
	if(atindex !== -1)
	{
		return  email.substring(atindex, email.length);
	}
	return '';
}

function startGrid() {
	if(_sfFetchObjects) {
		calculatePercentages();
		$("#_loadingGridArea").hide();
		$("#_gridArea").show();
		setupMatchedGrid();
		setupPossibleGrid();
		setupUnmatchedGrid();
		
		_sfFetchObjects = false;
	} else {
		setTimeout(function () {
			startGrid();
		}, 5000);
	}
}

function setupPossibleGrid() {
	data = [];
	for(var i=0;i<sfobjects.length;i++) {
		var m = sfobjects[i].Possible;
		for(var j=0; j<m.length; j++) 
		{
			AddPossibleColumns(m[j]);
			data.push(m[j]);
		}		
	}	
	CombinedPossibles = data;
	
	jQuery("#possibleDiv").jqGrid({
	data: CombinedPossibles,
	datatype:"local",
	height:'auto',
	rowNum: 10,
	autowidth:true,
	pager: "#possiblePager",
   	rowList:[10,50,300],
	colNames: ['Object Type', 
			'Salesforce Entity', 
			'Possible Match 1',
			'Possible Match 2',
			'Possible Match 3',
			'Possible Match 4'		
			],
	cmTemplate: { title: false },
	sortname: 'type',
	colModel: [
			{name:'type', index:'type', width:80, sorttype:'string', search:false},
			
			{name:'SFEntityLink', index:'Name', width:250, sorttype:'string'},
			
			{name:'PossibleMatch1', index:'PossibleMatch1', width:250, sortable:false},	
			
			{name:'PossibleMatch2', index:'PossibleMatch2', width:250, sortable:false},
			
			{name:'PossibleMatch3', index:'PossibleMatch3', width:250, sortable:false},
			
			{name:'PossibleMatch4', index:'PossibleMatch4', width:250, sortable:false}
			],
	multiselect: false,	
	ignoreCase: true,
	caption: 'Possible Matches of RelSci Entities</span><input class="sfSearchBox" id="searchPossible" size="40px" placeholder="Search Saleforce Entities..." />',
	gridComplete: function () {
			loadRSEntities('#possibleDiv');
			buildRSCardDialog("span.rsEntity");
		} 
	});
	
	jQuery("#searchPossible").keypress(function(e) {
	if(e.keyCode == 13)
		{
			e.preventDefault();
			var searchText = this.value;
			var grid = jQuery("#possibleDiv");
			var postdata = grid.jqGrid('getGridParam','postData');
			jQuery.extend (postdata,
							{filters:'',
							 searchField: 'Name',
							 searchOper: 'cn',
							 searchString: searchText});
			grid.jqGrid('setGridParam', {search: true, postData: postdata});
			grid.trigger("reloadGrid",[{page:1}]);
		}
	});
}

function setupUnmatchedGrid() {
	unmatcheddata = [];
	
	for(var i=0;i<sfobjects.length;i++) {
		var m = sfobjects[i].Unmatched;
		for(var j=0; j<m.length; j++) 
		{
			AddUnmatchedColumns(m[j]);
			unmatcheddata.push(m[j]);
		}		
	}	
	
	if({!ShowIgnoreEntity} == true)
	{
		jQuery("#unmatchedDiv").jqGrid({
			data: unmatcheddata,
			datatype:"local",
			height:'auto',
			rowNum: 10,
			autowidth:true,
			pager: "#unmatchedPager",	
		   	rowList:[10,50,300],
			colNames: ['Object Type', 
					'Salesforce Entity', 
					'No Match Reason',
					'Request Profile',
					'Ignore?'
					],
			cmTemplate: { title: false },
			sortname: 'type',
			colModel: [
					{name:'type', index:'type', width:80, sorttype:'string'},
					
					{name:'SFEntityLink', index:'Name', width:250, sorttype:'string'},
					
					{name:'NoMatchReason', index:'NoMatchReason', width:250, sortable:false },								
					
					{name:'RequestProfile', index:'RequestProfile', width:150, sortable:false },
					
					{name:'IgnoreEntity', index:'IgnoreEntity', width:80, sortable:false }
					],
			multiselect: false,	
			ignoreCase: true,
			caption: 'No Matches to RelSci Entities</span><input class="sfSearchBox" id="searchUnmatched" size="40px" placeholder="Search Saleforce Entities..." />',
			gridComplete: function () {
				} 
		});
	}
	else
	{
		jQuery("#unmatchedDiv").jqGrid({
			data: unmatcheddata,
			datatype:"local",
			height:'auto',
			rowNum: 10,
			autowidth:true,
			pager: "#unmatchedPager",	
		   	rowList:[10,50,300],
			colNames: ['Object Type', 
					'Salesforce Entity', 
					'No Match Reason',
					'Request Profile'
					],
			cmTemplate: { title: false },
			sortname: 'type',
			colModel: [
					{name:'type', index:'type', width:80, sorttype:'string'},
					
					{name:'SFEntityLink', index:'Name', width:250, sorttype:'string'},
					
					{name:'NoMatchReason', index:'NoMatchReason', width:250, sortable:false },								
					
					{name:'RequestProfile', index:'RequestProfile', width:150, sortable:false }
					
					],
			multiselect: false,	
			ignoreCase: true,
			caption: 'No Matches to RelSci Entities</span><input class="sfSearchBox" id="searchUnmatched" size="40px" placeholder="Search Saleforce Entities..." />',
			gridComplete: function () {
				} 
		});
	}
	
	
	jQuery("#searchUnmatched").keypress(function(e) {
	if(e.keyCode == 13)
		{
			e.preventDefault();
			var searchText = this.value;
			var grid = jQuery("#unmatchedDiv");
			var postdata = grid.jqGrid('getGridParam','postData');
			jQuery.extend (postdata,
							{filters:'',
							 searchField: 'Name',
							 searchOper: 'cn',
							 searchString: searchText});
			grid.jqGrid('setGridParam', {search: true, postData: postdata});
			grid.trigger("reloadGrid",[{page:1}]);
		}
	});
	
}

function setupMatchedGrid() {
	matchedData = [];

	for(var i=0;i<sfobjects.length;i++) {
		var m = sfobjects[i].Matched;
		for(var j=0; j<m.length; j++) 
		{
			AddMatchedColumns(m[j]);
			matchedData.push(m[j]);
		}
	}		
	
	jQuery("#matchedDiv").jqGrid({
	data: matchedData,
	datatype:"local",
	height:'auto',
	rowNum: 10,
	autowidth:true,
	pager: "#matchedPager",	
   	rowList:[10,50,300],
	colNames: ['Object Type', 
			'Salesforce Entity', 
			'RelSci Entity',
			'RelSci Entity Type',
			'RelSci Description',
			'Match Type'
			
			],
	cmTemplate: { title: false },
	sortname: 'type',
	colModel: [
			{name:'type', index:'type', width:80, sorttype:'string', search:false},
			
			{name:'SFEntityLink', index:'Name', width:250, sorttype:'string', searchoptions:{sopt:['cn']}},
			
			{name:'RSEntityLink', index:'RSEntityLink', width:250, sortable:false, search:false },
			
			{name:'RSEntityType', index:'RSEntityType', width:150, sortable:false, search:false },								
			
			{name:'RSDescription', index:'RSDescription', width:250, sortable:false, search:false },
			
			{name:'MatchType', index:'MatchType', width:250, sorttype:'string', align:'right', search:false},
			],
	multiselect: false,
	ignoreCase: true,
	caption: 'Matched RelSci Entities</span><input class="sfSearchBox" id="searchMatched" size="40px" placeholder="Search Saleforce Entities..." />',
	gridComplete: function () {
		loadRSEntities('#matchedDiv');
		buildRSCardDialog("span.rsEntity");
		
		} 
	});
	
	jQuery("#searchMatched").keypress(function(e) {
		if(e.keyCode == 13)
			{
				e.preventDefault();
				var searchText = this.value;
				var grid = jQuery("#matchedDiv");
				var postdata = grid.jqGrid('getGridParam','postData');
				jQuery.extend (postdata,
								{filters:'',
								 searchField: 'Name',
								 searchOper: 'cn',
								 searchString: searchText});
				grid.jqGrid('setGridParam', {search: true, postData: postdata});
				grid.trigger("reloadGrid",[{page:1}]);
			}
	});
	
	
}

jQuery("#unmatchedDiv").on('click', '.rsRequestProfile', function () {

	var t = $(this);
		
	for(var i=0;i<unmatcheddata.length;i++) {
		if(unmatcheddata[i].Id == t.data('sfid'))
		{
			sfo = unmatcheddata[i];
			sfo.RequestProfile = '<span class="rsProfileRequested" data-sfid="'+sfo.Id+'" data-sftype="'+sfo.type+'">Request Sent</span>';
			i=unmatcheddata.length;
						
		}
	}				   
    jQuery.ajax({
		type:'post',
		cache:false,
		datatype:'json',
		url:"{!URLFOR($Page.RelSciPath)}",
		data: {
				action: 'submitProfileRequest',
				sfobj: JSON.stringify(sfo),
				sfType: sfo.type,
				sfId: sfo.Id,
				csrf: '{!JSENCODE(csrf)}'
				}
		});
	$(this).html('Request Sent');
	$(this).attr('class', 'rsProfileRequested');
});

jQuery("#unmatchedDiv").on('click', '.rsIgnoreEntity', function () {

	var t = $(this);
		
	for(var i=0;i<unmatcheddata.length;i++) {
		if(unmatcheddata[i].Id == t.data('sfid'))
		{
			sfo = unmatcheddata[i];
			sfo.rels__MatchType__c = '-1';
			sfo.IgnoreEntity = '<span class="rsEnableEntityMatching" data-sfid="'+sfo.Id+'" data-sftype="'+sfo.type+'" data-rsMatchType="-1">Enable Matching</span>';
			i=unmatcheddata.length;
						
		}
	}


    jQuery.ajax({
		type:'post',
		cache:false,
		datatype:'json',
		url:"{!URLFOR($Page.RelSciPath)}",
		data: {
				action: 'ignoreEntity',
				sfType: sfo.type,
				sfId: sfo.Id,
				csrf: '{!JSENCODE(csrf)}'
				},
		success: function(e) {
			t.html('Enable Matching');
			t.attr('class', 'rsEnableEntityMatching');
			t.attr('data-rsMatchType', sfo.rels__MatchType__c);
		}
		
		});	
});

jQuery("#unmatchedDiv").on('click', '.rsEnableEntityMatching', function () {
	
	var t = $(this);
	
	for(var i=0;i<sfobjects.length;i++) {
		if(sfobjects[i].Type == t.data('sftype'))
		{
			var sfObjType = sfobjects[i].Unmatched;
			for(var j=0;j<sfObjType.length; j++)
			{
				if(sfObjType[j].Id == t.data('sfid'))
				{
					sfo = sfObjType[j];
					sfo.rels__MatchType__c = '0';
					sfo.IgnoreEntity = '<span class="rsIgnoreEntity" data-sfid="'+sfo.Id+'" data-sftype="'+sfo.type+'" data-rsMatchType="0">Ignore</span>';
					j=sfObjType.length;
					i=sfobjects.length;
				}			
			}
		}
	}
	
    jQuery.ajax({
		type:'post',
		cache:false,
		datatype:'json',
		url:"{!URLFOR($Page.RelSciPath)}",
		data: {
				action: 'enableEntity',
				sfType: sfo.type,
				sfId: sfo.Id,
				csrf: '{!JSENCODE(csrf)}'
				},
		success: function(e) {
			t.html('Ignore');
			t.attr('class', 'rsIgnoreEntity');
			t.attr('data-rsMatchType', sfo.rels__MatchType__c);
		}
	});
});

var keepDialogOpen = 0;
$("#_rsEntityCardDialog").mouseenter(function () {
	keepDialogOpen = 1;
	}).mouseleave(function () {
	keepDialogOpen = 0;
		dlg.html('');
		dlg.dialog("close");
		$("#_relDetailsArrow").hide();
	});
	
function buildRSCardDialog(area)
{
	
	jQuery(area).hoverIntent({
		over: function() {
			var node = $(this);
			var entType = node.data("entitytype");	
			var entityName = node.data("entityname");	

			var windowWidth = $(window).width();

			//get the size of the grid cell offset by the card dialog size constant
			var totalPos = this.parentNode.offsetLeft + this.parentNode.offsetWidth + 418;

			dlg = $("#_rsEntityCardDialog").dialog({
				modal: false,
				autoOpen: false,
				position: {
					my: "left",
					at: "right+9",
					of: node.parent(),
					collision: "flip"
				}
			});	

			arw = $("#_relDetailsArrow");
			arw.show();

			if(windowWidth < totalPos)
			{
				if(arw.hasClass('rsArrowLeft'))
				{
					arw.addClass('rsArrowRight').removeClass('rsArrowLeft');
				}
				arw.position({
					my: "right",
					at: "left-10",
					of: node.parent()
				});
			}
			else
			{
				if(arw.hasClass('rsArrowRight'))
				{
					arw.addClass('rsArrowLeft').removeClass('rsArrowRight');
				}
				arw.position({
					my: "left",
					at: "right+10",
					of: node.parent()
				});
			}

			var zIndexCard = dlg.zIndex();
			arw.css("z-index", zIndexCard+1);	

			jQuery.ajax({
				type:'get',
				cache:false,
				datatype:'json',
				url:'/apex/RelSciSyncAjax',
				data: {
					action: 'getentityCard',
					entityid: JSON.stringify(node.data("entityid")),
					entitytype: JSON.stringify(entType),
					csrf: '{!JSENCODE(csrf)}'
						},
				success: function(data) {
						dlg.dialog('option','title',entityName);
						dlg.html(data.EntityCard);
					}
			});

			dlg.dialog("open");
		}, 
		interval: 300,
		timeout: 300,
		out: function() {
			if (keepDialogOpen == 0) {
				dlg.html('');
				dlg.dialog("close");
				$("#_relDetailsArrow").hide();
			}
		}
	});
}



function AddMatchedColumns(item)
{
	item.SFEntityLink = '<a target="_blank" href="/'+item.Id+'">'+item.Name+'</a>';
	item.RSEntityLink = '<span class="rsEntity" data-sftype="'+item.type+'" data-sfid="'+item.Id+'" data-entityid="'+item.rels__EntityId__c+'"></span>';
	item.RSEntityType = '<span class="rsEntityType" data-entityid="'+item.rels__EntityId__c+'">'+item.rsEntityType+'</span>';
	item.RSDescription = '<span class="rsDescription" data-entityid="'+item.rels__EntityId__c+'">Loading</span>';
	item.MatchType = item.rels__MatchType__c == '1' ? 'Auto Matched' : 'Confirmed';
}


function AddPossibleColumns(item)
{
	item.SFEntityLink = '<a target="_blank" href="/'+item.Id+'">'+item.Name+'</a>';
	
	var entities = item.rels__EntityId__c.split(',');
	if(entities[0] != null)
	{		
		item.PossibleMatch1 = '<span class="rsEntity" data-sftype="'+item.type+'" data-sfid="'+item.Id+'" data-entityid="'+entities[0]+'"></span>';
	}
	if(entities[1] != null)
	{
		item.PossibleMatch2 = '<span class="rsEntity" data-sftype="'+item.type+'" data-sfid="'+item.Id+'" data-entityid="'+entities[1]+'"></span>';
	}
	if(entities[2] != null)
	{
		item.PossibleMatch3 = '<span class="rsEntity" data-sftype="'+item.type+'" data-sfid="'+item.Id+'" data-entityid="'+entities[2]+'"></span>';
	}
	if(entities[3] != null)
	{
		item.PossibleMatch4 = '<span class="rsEntity" data-sftype="'+item.type+'" data-sfid="'+item.Id+'" data-entityid="'+entities[3]+'"></span>';
	}
}

function AddUnmatchedColumns(item)
{
	item.SFEntityLink = '<a target="_blank" href="/'+item.Id+'">'+item.Name+'</a>';
	if(item.rels__MatchType__c == '-1')
	{
		item.NoMatchReason = '<span class="rsEntity">Item manually set to be ignored</span>';
	}
	else
	{
		item.NoMatchReason = '<span class="rsEntity">No Results for Salesforce data</span>';
	}
	if(item.rels__EntityId__c == '-1')
	{
		item.RequestProfile = '<span class="rsProfileRequested" data-sfid="'+item.Id+'" data-sftype="'+item.type+'">Profile Previously Requested</span>'
	}
	else
	{
		item.RequestProfile = '<span class="rsRequestProfile" data-sfid="'+item.Id+'" data-sftype="'+item.type+'">Send Request to Profile</span>';
	}
	
	if(item.rels__MatchType__c == '-1' && {!ShowIgnoreEntity} == true)
	{
		item.IgnoreEntity = '<span class="rsEnableEntityMatching" data-sfid="'+item.Id+'" data-sftype="'+item.type+'" data-rsMatchType="'+item.rels__MatchType__c+'">Enable Matching</span>';
	}
	else if ({!ShowIgnoreEntity} == true)
	{
		item.IgnoreEntity = '<span class="rsIgnoreEntity" data-sfid="'+item.Id+'" data-sftype="'+item.type+'" data-rsMatchType="'+item.rels__MatchType__c+'">Ignore</span>';
	}
}

function loadRSEntities(area)
{
	var dict = {};
	jQuery(area+" .rsEntity").each(function () { 
		dict[$(this).data("entityid")] =1; 
	});
	var array = [];
	for(var key in dict)
	{
		if(key.length>0)
			array.push(key);
	}
	jQuery.ajax({
		type:'post',
		cache:false,
		datatype:'json',
		url:'/apex/RelSciSyncAjax',
		data : {
			action: 'getentities',
			entityIds: JSON.stringify(array),
			csrf: '{!JSENCODE(csrf)}'
		},
		success: function(data) {
			dict = JSON.parse(data.Entities);
			
			jQuery(area+" .rsEntity").each(function () { 
				var t = $(this);
				if( dict[t.data("entityid")] ) {
					var o = dict[t.data("entityid")] ;
					if(area == "#possibleDiv")
					{
						var sftype = t.data("sftype");
						var sfid = t.data('sfid'); 
						t.attr("data-entitytype",o.EntityType);
						t.attr("data-entityName",o.DisplayName);
						var text = '<a target="_blank" href="/apex/RelSci?entityId='+t.data("entityid")+'&entityType='+o.EntityType+'">'+o.DisplayName+'</a> - <span class="rsConfirm" data-entityid="'+t.data("entityid")+'" data-sftype="'+sftype+'" data-sfid="'+sfid+'">Confirm</span>';
					}
					else if(area == "#matchedDiv") {
						var sftype = t.data("sftype");
						var sfid = t.data('sfid');
						t.attr("data-entitytype",o.EntityType);
						t.attr("data-entityName",o.DisplayName); 
						var text = '<a target="_blank" href="/apex/RelSci?entityId='+t.data("entityid")+'&entityType='+o.EntityType+'">'+o.DisplayName+'</a> - <span class="rsIncorrect" data-entityid="'+t.data("entityid")+'" data-sftype="'+sftype+'" data-sfid="'+sfid+'">Incorrect?</span>';
					}
					else if(area == "#unmatchedDiv"){
						var sftype = t.data("sftype");
						var sfid = t.data('sfid');
						}
					t.html(text);
				} 
			});
			
			jQuery(area+" .rsDescription").each(function () { 
				var t = $(this);
				if( dict[t.data("entityid")] ) {
					var o = dict[t.data("entityid")] ;
					if(o.Description != null)
					{
						var text = o.Description.replace(/\r\n/g,"");
						text = text.replace(/\n/g,"");
						t.html(text);
					} 
					else 
					{
						t.text('');
					}
				} 
			});
			
			jQuery(area+" .rsEntityType").each(function () { 
				var t = $(this);
				if( dict[t.data("entityid")] ) {
					var o = dict[t.data("entityid")] ;
					if(o.EntityType == 6)
					{
						t.text('Organization');
					} 
					else if(o.EntityType == 7) 
					{
						t.text('Person');
					}
				} 
			});
			
			/*jQuery(area+" .rsEntityDialog").each(function () {
				var t = $(this);
				if( dict[t.data("entityid")]) {
					var o = dict[t.data("entityid")];
					t.text('EntityID:');
				}
			});*/

		}
	});
}



jQuery("#possibleDiv").on('click', '.rsConfirm', function () {
		               
        var entityId = $(this).data('entityid');
        var salesforceId = $(this).data('sfid');
        var sfType = $(this).data('sftype');
        var baseurl = "{!URLFOR($Page.RelSciPath)}";
        if(baseurl[baseurl.length-1] == "/")
        {
            baseurl = baseurl.substring(0,baseurl.length-2);
        }
        var node = this.parentNode.parentNode;
        $(node).css('background-color','green');
        var rowId = $(node.parentNode).attr('id');
        var sfid = $(this).data('sfid');
        
        jQuery.ajax({ 
            url: baseurl,
            cache:false,
            data: { 
            accountId : salesforceId,
            sfType : sfType,
            confirmEntity : entityId, 
            csrf: '{!JSENCODE(csrf)}',
            type : 7   
            },
            type:'POST',
            success: function(d) {
                var data = [];
				for(var i=0;i<CombinedPossibles.length;i++) {
					if(CombinedPossibles[i].Id != sfid) {
						AddPossibleColumns(CombinedPossibles[i]);
						data.push(CombinedPossibles[i]);		
					}
					 else if(CombinedPossibles[i].Id == sfid){
					 	CombinedPossibles[i].rels__EntityId__c = entityId;
					 	AddMatchedColumns(CombinedPossibles[i]);
					 	matchedData.push(CombinedPossibles[i]);

					 	for(var j=0; j<sfobjects.length; j++)
					 	{
					 		if(i < sfobjects[j].Possible.length && sfobjects[j].Possible[i].type === CombinedPossibles[i].type)
					 		{
					 			sfobjects[j].Matched.push(CombinedPossibles[i])
					 		}
					 	}
					 }
				}
				CombinedPossibles = data;									
                
                $("#possibleDiv").setGridParam({'data':CombinedPossibles});
                $("#possibleDiv").trigger("reloadGrid");
                $("#matchedDiv").setGridParam({'data':matchedData});
                $("#matchedDiv").trigger("reloadGrid");
            }
        }); 
    });

jQuery("#matchedDiv").on('click', '.rsIncorrect', function () {
		               
        var entityId = $(this).data('entityid');
        var salesforceId = $(this).data('sfid');
        var sfType = $(this).data('sftype');
        var baseurl = "{!URLFOR($Page.RelSciPath)}";
        if(baseurl[baseurl.length-1] == "/")
        {
            baseurl = baseurl.substring(0,baseurl.length-2);
        }
        var node = this.parentNode.parentNode;
        $(node).css('background-color','red');
        var rowId = $(node.parentNode).attr('id');
        var sfid = $(this).data('sfid');
        
        jQuery.ajax({ 
            url: baseurl+'?unlinkEntity='+salesforceId+'&sfType='+sfType+'&csrf={!JSENCODE(csrf)}',
            cache:false,
            data: { 
	            accountId : salesforceId,
	            sfType : sfType,
	            incorrectEntity : entityId, 
	            csrf: '{!JSENCODE(csrf)}',
	            type : 7   
            },
            type:'POST',
            success: function(d) {
                var data = [];
				for(var i=0;i<matchedData.length;i++) {
					if(matchedData[i].Id != sfid) {
						AddMatchedColumns(matchedData[i]);
						data.push(matchedData[i]);		
					}
					else if(matchedData[i].Id == sfid) {
						AddUnmatchedColumns(matchedData[i]);
						unmatcheddata.push(matchedData[i]);

						for(var j=0; j<sfobjects.length; j++)
						{
							if(sfobjects[j].Type == matchedData[i].type)
							{
								sfobjects[j].Unmatched.push(matchedData[i]);
							}
						}
						
						matchedData.splice(i, 1);
						$("#matchedDiv").jqGrid('delRowData',rowId);

					}
				}
				matchedData = data;

                
                $("#matchedDiv").setGridParam({'data':data});
                $("#matchedDiv").trigger("reloadGrid");
				$("#unmatchedDiv").setGridParam({'data':unmatcheddata});                
                $("#unmatchedDiv").trigger("reloadGrid");
            }
        }); 
    });	

    
jQuery("#_beginMatching").click(function () {

});    
	
startGrid();


_isMatching = false;

window.onbeforeunload = function() { 
	if(_isMatching == true) {
	    return 'Please stay on this page during the matching process.';
	} else {
	    return;
	}
}


function upload()
{
    jQuery("#_syncModalResults").hide();
    jQuery("#_syncModalRunning").show();	   
    jQuery("#_syncModal").show();
   	GetSyncVersion();
}    

jQuery("#_upload").click(function () {
      upload();
  });  
  
function refreshGrid() {
	window.location.reload(true);
}

jQuery(document).on('click', '._closeModal', function () {
	$("#_syncModalRunning").hide();
    $("#_syncModalError").hide();
    $("#_syncModal").hide();

});

</script>

<div style="display:none; padding:5px; border:#333 2px solid; background:#fff; position:fixed; top:50%; left:50%; margin-top:-75px; margin-left:-250px; z-index:101; width:500px; height:210px;" id="_syncModal">

	<div style="display:none;" id="_syncModalError">
		<h1 class="modalTitle">Linking Process Error<span class="_closeModal" style="float:right;">X</span></h1>
		<hr/>
		<p>An error occured while matching Salesforce accounts, contacts, opportunities, and leads to RelSci objects.  Please try again and if this error continues contact RelSci support.</p>
	</div>
	<div style="display:none;" id="_syncModalRunning">
	    <h1 class="modalTitle">Run Linking Process <span class="_closeModal" style="float:right;">X</span></h1>
	    <hr/>
	    <p>This process will attempt to match the remaining Salesforce accounts, contacts, opportunities, and leads. This may take a while.</p>
	    <br />
	    
	    <div class="loader"></div>
	    <center>
	    <span id="_statusText" class="statusText">Starting</span>
	    </center>
	    
	    
	</div>

	<div style="display:none;" id="_syncModalResults">
		<h1 class="modalTitle">Matching Process Finished <span class="_closeModal" style="float:right;">X</span></h1>
		<hr/>
		<p>The matching process is now finished. You can always view your possible matches on the individual entity's page or by going to the RelSci Match Manager Page.</p>
		<span style="float:left; padding-right:50px;">
		    <span id="_automatchCount" class="syncResultNumbers">100</span>  <span class="syncResultCategories">Auto Matches</span>
		</span>
		
		<span style="float:left; padding-right:50px;">
		    <span id="_possibleCount" class="syncResultNumbers">100</span>   <span class="syncResultCategories">Possible Matches</span>
		</span>
		
		<span style="float:left; padding-right:50px;">
		    <span id="_unmatchedCount" class="syncResultNumbers">100</span>  <span class="syncResultCategories">No Matches</span>
		</span>
		<br />
		<br />
		<br />
		<center>
		<button onclick='refreshGrid()' id="doneSync" class="_refreshPage">View Results</button> 		
		</center>
	</div>

</div>   

</apex:page>