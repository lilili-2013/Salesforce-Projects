<apex:page sidebar="false" showHeader="true" standardStylesheets="false" controller="sos_setup_controller">
<apex:composition template="Bootstrap_template_SOS"/>

<apex:includeScript value="/soap/ajax/32.0/connection.js"/>
<apex:includeScript value="/support/console/32.0/integration.js"/>
<apex:stylesheet value="{!$Resource.sos_setup_style}"/>


<h1>SOS Quick Setup</h1>

<div class="accordion" id="accordion2">
    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_1">
                <span>1</span>Check Org Requirements
            </a>
        </div>
        <div id="collapse_1" class="accordion-body collapse">
            <div class="accordion-inner">
                <h2>Salesforce Winter'15 Release</h2> - <span id='release-pass' class='fail'>FAIL</span>
                <p>
                    - available on Prod Oct 17, 2014<br/>
                    <span id='sandbox' style='display:none'>- available in a Sandbox on Sept 7, 2014</span>
                </p>
                <h2>SOS Service Channel Exists</h2> - <span id='service-channel-pass' class='fail'>FAIL</span>
                <p id='service-channel-fail' style='display:none'>To make changes to the "SOS" service channel, go to <a href='/0N9' target='_blank'>Service Channels</a>.
                </p>
                <br/><br/>
                <h4 id='bothPass' style='color: limegreen'></h4>
                <br/><br/>
                <p>
                  <b>NOTE:</b> Users will have to be a "Service Cloud User". You can enable users <a href='/005' target='_blank'>here</a>. 
                </p>
            

            </div>
        </div>
    </div>

    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_2">
                <span>2</span>Adding Presence Widget
            </a>
        </div>
        <div id="collapse_2" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/02u" class="mybutton" target="_blank">Go to Apps</a>
                <p>To add the Presence Widget press the "Go to Apps" button. Click "Edit" for the app you are 
                    going to update (ex: Sample Console). Add "Service Presence" to the selected console 
                    components. You will also need to add "sos-api-stg.goinstant.org" to whitelisted domains.

                    <br/><br/>NOTE: You may need to go to <a href='/00e' target='_blank'>Profiles</a> and enable the Sample Console.

                </p>
                <apex:image value="{!$Resource.sos_update_app}"/>
            </div>
        </div>
    </div>

    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_3">
            <span>3</span>Create New Service Presence Status
            </a>
        </div>
        <div id="collapse_3" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/0N5/e" class="mybutton" target="_blank">New Service Presence Status</a>
                <p>Now you need to create a new "Presence Status". It is suggested that Status 
                    Name and APi Name should be labelled "Online". Also add "SOS" as the Selected Channel.
                </p>
                <apex:image value="{!$Resource.sos_presence_status}"/>
            </div>
        </div>
    </div>

    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_4">
            <span>4</span>Create New Routing Configuration
            </a>
        </div>
        <div id="collapse_4" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/0K9/e" class="mybutton" target="_blank">New Routing Config</a>
                <p>
                    Now you will need to create a new Routing Configuration. The Route Configuration 
                    name should be "SOS Route" (the Developer Name will auto populate). The Service 
                    Channel should be labelled "SOS". The Routing Priority should be "1" and the Routing 
                    Model should be "Least Active".                
                </p>
                <apex:image value="{!$Resource.sos_route_config}"/>
            </div>
        </div>
    </div>

    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_5">
            <span>5</span>Create New Queue
            </a>
        </div>
        <div id="collapse_5" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/p/own/Queue/e" class="mybutton" target="_blank">Create New Queue</a>
                <p>
                    Now you are ready to create a new Queue for SOS. You can label it "SOS Queue", the 
                    Queue Name will auto populate. The Routing configuration should be "SOS Route" (from step 4) 
                    <br/><br/>
                    Note: You can use LookUp to help find the correct Routing Configuration. The Selected 
                    Object needs to be "SOS Session". You will also need to add all users/roles to that 
                    specific queue.
                </p>
                <apex:image value="{!$Resource.sos_queue1}"/> &nbsp; &nbsp;
                <apex:image value="{!$Resource.sos_queue2}"/>
            </div>
        </div>
    </div>

     <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_6">
            <span>6</span>Update Permission Set
            </a>
        </div>
        <div id="collapse_6" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/0PS" class="mybutton" target="_blank">Go to Permission Sets</a>
                <p>
                    Now you need to update the permission sets of all the Users that will be accepting SOS requests.
                    Click "Go to Permssion Sets" and complete the 6 sub-steps.
                    <br/>
                    <br/>6a. Click the "SOS Permission".
                    <br/>6b. On the SOS permission page click the "Service Presence Statuses Access" link under "Apps".
                    <br/>6c. On the Service Presence Statuses Access page click "Edit".
                    <br/>6d. Add "Online" to enabled Presence Service Statuses.
                    <br/>6e. Click "Manage Assignments".
                    <br/>6f. Add user(s) to the Assignment.
                </p>
                <button id='previousButton' onclick='previousStep();' disabled='true'>
                    Previous Step
                </button>
                
                <button id='nextButton' onclick='nextStep();'>
                    Next Step
                </button>
                
                <p>
                    Showing step <span id='stepNum'>6a (1</span> of 6).
                </p>
                <span id="seven1"><apex:image value="{!$Resource.sos_perm7a}"/></span>
                <span id="seven2" style='display: none'><apex:image value="{!$Resource.sos_perm7b}"/></span>
                <span id="seven3" style='display: none'><apex:image value="{!$Resource.sos_perm7c}"/></span>
                <span id="seven4" style='display: none'><br/><apex:image value="{!$Resource.sos_perm7d}"/></span>
                <span id="seven5" style='display: none'><apex:image value="{!$Resource.sos_perm7e}"/></span>
                <span id="seven6" style='display: none'><apex:image value="{!$Resource.sos_perm7f}"/></span>
            </div>
        </div>
    </div>
    
    
    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_7">
            <span>7</span>Create New SOS Deployment
            </a>
        </div>
        <div id="collapse_7" class="accordion-body collapse">
            <div class="accordion-inner">
                <a href="/0NW" class="mybutton" target="_blank">New SOS Deployment</a>
                <p>
                    Now you are ready to create New SOS Deployment. The SOS Deployment Name should 
                    be "SOS Deploy", the Developer Name will auto populate. Make sure "Enable Deployment" 
                    is checked. The Queue name is from Step 6 and should be "SOS Queue".
                </p>
                    <apex:image value="{!$Resource.sos_deploy}"/>
            </div>
        </div>
    </div>

    <div class="accordion-group">
        <div class="accordion-heading">
            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion2" href="#collapse_8">
            <span>8</span>Info For Framework
            </a>
        </div>
        <div id="collapse_8" class="accordion-body collapse">
            <div class="accordion-inner">
                <p>
                    The following information is required to successfully configure the SOS SDK within your native app.
                </p>
				<code class="source">
                    Org ID: <b id='org_id'>{!$Organization.Id}</b>
                    <br/>SOS Deployment ID: <b id='deploy_id'></b>
                     <br/>Live Agent API Endpoint: <b><a href='/liveagent/settings.apexp' target='_blank'>Found here</a></b>
                    (*Note: Only hostname is required)
                </code>
                <br/><br/>
                <p>   
                	<i>*If</i> LA API endpoint https://d.la.gus.salesforce.com/chat/rest/ then only <b>d.la.gus.salesforce.com</b> would be required.
                </p>

            </div>
        </div>
    </div>

</div>
<script type='text/javascript'>

window.currentStep = 1;

function nextStep() {
	var oldStep = $('#seven'+currentStep);
    var nextButton = $('#nextButton');
    var previousButton = $('#previousButton');
    
   	currentStep++;
   	var newStep = $('#seven'+currentStep);

    previousButton.prop('disabled', false);
    
    if (currentStep == 6) {
        nextButton.prop('disabled',true);
    }
    
    oldStep.hide();
    newStep.show();
    stepText();
}
    
function previousStep() {
	var oldStep = $('#seven'+currentStep);
    var nextButton = $('#nextButton');
    var previousButton = $('#previousButton');
    
   	currentStep--;
   	var newStep = $('#seven'+currentStep);

    nextButton.prop('disabled', false);
    
    if (currentStep == 1) {
        previousButton.prop('disabled',true);
    }
    
    oldStep.hide();
    newStep.show();
    stepText();
}
    
function stepText() {
	var text;
	
    switch(currentStep) {
    	case 1:
            text='6a (';
            break;
        case 2:
            text='6b (';
            break;
        case 3:
            text='6c (';
            break;
        case 4:
            text='6d (';
            break;
        case 5:
            text='6e (';
            break;
        case 6:
            text='6f (';
            break;
    }
    
    $('#stepNum').text(text + currentStep);  
}
  
sforce.connection.sessionId = '{!$Api.Session_ID}';

function getDeployId() {
    var deployIdEl = $('#deploy_id');

    var q = "SELECT Id FROM SOSDeployment";
    var qr = sforce.connection.query(q);
    var records = qr.getArray('records');

    if (!records.length) {
        deployIdEl.text('SOS Deployment does not exist');
        return;
    }

    deployIdEl.text(records[0].Id);

}

if (sforce.console.setCustomConsoleComponentWidth) {
    getDeployId();

    $('#release-pass').removeClass('fail').addClass('pass').text('PASS');

    var q = "SELECT Id FROM ServiceChannel WHERE DeveloperName ='SOS'";
    var qr = sforce.connection.query(q);
    var records = qr.getArray('records');

    if (records.length) {
        $('#service-channel-pass').removeClass('fail').addClass('pass').text('PASS');
    	$('#bothPass').text('You have everything you need! Please proceed to Step 2.');
    } else {
    	$('#service-channel-fail').show();    
    }
} else {
	$('#sandbox').show();    
}

</script>

</apex:page>