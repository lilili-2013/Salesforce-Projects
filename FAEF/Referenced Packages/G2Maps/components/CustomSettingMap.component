<apex:component Controller="g2maps.CustomSettingMapController" allowDML="true" access="public" selfClosing="true">
    <!-- CloudTrigger G2Maps, Copyright 2011, CloudTrigger, Inc. -->
<apex:stylesheet value="https://js.arcgis.com/3.8/js/esri/css/esri.css"/>
    <apex:stylesheet value="https://js.arcgis.com/3.8/js/dojo/dijit/themes/tundra/tundra.css "/>
    <apex:stylesheet value="https://js.arcgis.com/3.8/js/esri/dijit/css/Popup.css"/>
    <apex:stylesheet value="https://js.arcgis.com/3.8/js/dojo/dojox/grid/resources/tundraGrid.css"/>
    <apex:includeScript value="https://serverapi.arcgisonline.com/jsapi/arcgis/3.5/"/>

    <style type="text/css">
    .esriSimpleSliderTL {
        top: 60px;
        left: 15px;
    }
    </style>
    <!--<meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no"/>-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0,user-scalable=no"/>
        <script type="text/javascript">
            djConfig = {
                isDebug: false //,
                //ieForceActiveXXhr: true
            };
        </script>    
    <apex:attribute name="Mobile" type="String" assignTo="{!Mobile}" required="false" description="" access="public"/>
    <apex:attribute name="Embedded" type="String" assignTo="{!Embedded}" required="false" description="" access="public"/>
    
    <apex:attribute name="Width" type="String" assignTo="{!Width}" required="false" description="" access="public"/>
    <apex:attribute name="Height" type="String" assignTo="{!Height}" required="false" description="" access="public"/>
    <apex:attribute name="ObjRecId" type="String" assignTo="{!objId}" required="false" description="" access="public"/>
    <apex:attribute name="LayerName" type="String" assignTo="{!LayerName}" required="false" description="" access="public"/>
    
    <apex:attribute name="Available" type="String" assignTo="{!Available}" required="false" description="" access="public"/>
    <apex:attribute name="Visible" type="String" assignTo="{!Visible}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer1" type="String" assignTo="{!Layer1}" required="false" description="" access="public"/>
    <apex:attribute name="Filter1" type="String" assignTo="{!Filter1}" required="false" description="" access="public"/>
    <apex:attribute name="Callback1" type="String" assignTo="{!Callback1}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer2" type="String" assignTo="{!Layer2}" required="false" description="" access="public"/>
    <apex:attribute name="Filter2" type="String" assignTo="{!Filter2}" required="false" description="" access="public"/>
    <apex:attribute name="Callback2" type="String" assignTo="{!Callback2}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer3" type="String" assignTo="{!Layer3}" required="false" description="" access="public"/>
    <apex:attribute name="Filter3" type="String" assignTo="{!Filter3}" required="false" description="" access="public"/>
    <apex:attribute name="Callback3" type="String" assignTo="{!Callback3}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer4" type="String" assignTo="{!Layer4}" required="false" description="" access="public"/>
    <apex:attribute name="Filter4" type="String" assignTo="{!Filter4}" required="false" description="" access="public"/>
    <apex:attribute name="Callback4" type="String" assignTo="{!Callback4}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer5" type="String" assignTo="{!Layer5}" required="false" description="" access="public"/>
    <apex:attribute name="Filter5" type="String" assignTo="{!Filter5}" required="false" description="" access="public"/>
    <apex:attribute name="Callback5" type="String" assignTo="{!Callback5}" required="false" description="" access="public" />
    
    <apex:attribute name="Layer6" type="String" assignTo="{!Layer6}" required="false" description="" access="public"/>
    <apex:attribute name="Filter6" type="String" assignTo="{!Filter6}" required="false" description="" access="public"/>
    <apex:attribute name="Callback6" type="String" assignTo="{!Callback6}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer7" type="String" assignTo="{!Layer7}" required="false" description="" access="public"/>
    <apex:attribute name="Filter7" type="String" assignTo="{!Filter7}" required="false" description="" access="public"/>
    <apex:attribute name="Callback7" type="String" assignTo="{!Callback7}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer8" type="String" assignTo="{!Layer8}" required="false" description="" access="public"/>
    <apex:attribute name="Filter8" type="String" assignTo="{!Filter8}" required="false" description="" access="public"/>
    <apex:attribute name="Callback8" type="String" assignTo="{!Callback8}" required="false" description="" access="public"/>
    
    <apex:attribute name="Layer9" type="String" assignTo="{!Layer9}" required="false" description="" access="public"/>
    <apex:attribute name="Filter9" type="String" assignTo="{!Filter9}" required="false" description="" access="public"/>
    <apex:attribute name="Callback9" type="String" assignTo="{!Callback9}" required="false" description="" access="public"/>
    
    <apex:actionFunction action="{!saveLocation}" name="jsSaveLocation" rerender="MsgShow1,MsgShow2" status="showPrg">
        <apex:param name="Latitude" assignTo="{!Latitude}" value="" />
        <apex:param name="Longitude" assignTo="{!Longitude}" value="" />
        <apex:param name="GeoCodeStatus" assignTo="{!GeoCodeStatus}" value="" />
    </apex:actionFunction>
     
    <apex:actionFunction action="{!saveAddress}" name="jsSaveAddress" rerender="MsgShow1,MsgShow2" status="showPrg">
        <apex:param name="Street" assignTo="{!Street}" value="" />
        <apex:param name="City" assignTo="{!City}" value="" />
        <apex:param name="State" assignTo="{!State}" value="" />
        <apex:param name="PostalCode" assignTo="{!PostalCode}" value="" />
        <apex:param name="Country" assignTo="{!Country}" value="" />
        <apex:param name="GeoCodeStatus" assignTo="{!GeoCodeStatus}" value="" />
    </apex:actionFunction>
    
    <apex:actionFunction action="{!doCheckIn}" name="jsCheckIn" rerender="">
        <apex:param name="Latitude" assignTo="{!Latitude}" value="" />
        <apex:param name="Longitude" assignTo="{!Longitude}" value="" />
        <apex:param name="Accuracy" assignTo="{!Accuracy}" value="" />
        <apex:param name="StringLocation" assignTo="{!StringLocation}" value="" />
        <apex:param name="ObjId" assignTo="{!ObjId}" value="" />
        <apex:param name="LayerName" assignTo="{!LayerName}" value="" />        
    </apex:actionFunction>

    <apex:actionFunction action="{!doChatterPost}" name="jsChatterPost" rerender="">
        <apex:param name="Body" assignTo="{!Body}" value="" />
        <apex:param name="ObjId" assignTo="{!ObjId}" value="" />
    </apex:actionFunction>

    <!-- <div id="g2map" class="G2Maps tundra" style="width:100%;height:100%" />  -->
    <div id="g2map" class="G2Maps tundra" style="width:{!Width};height:{!Height}" />
    <script type="text/javascript">
    function init() {
            //dojo.config.ieForceActiveXXhr = true;
            var layers = [];
            var renderInfo;
            var layerInfo;
            var otherlayerInfo;
        <apex:repeat value="{!OtherLayers}" var="l">
            var endpoint = "{!JSENCODE(l.g2maps__Endpoint__c)}";
            if(endpoint != null && endpoint != '' && endpoint.indexOf("arcgis.com") !== -1){
                if(endpoint.indexOf("?" !== -1)){
                    endpoint +=  "?token={!JSENCODE(AGOLToken)}";
                }
                else{
                    endpoint +=  "&token={!JSENCODE(AGOLToken)}";
                }
            }
            //alert("2"+endpoint);
            otherlayerInfo = {
                "type": "G2Maps::OtherLayer",
                "endpoint": "{!JSENCODE(l.g2maps__Endpoint__c)}",
                //"endpoint": endpoint,
                "implementation": esri.layers.{!l.g2maps__LayerType__c},
                "opacity": {!(l.g2maps__Opacity__c * 1.0) / 100.0},
                "name": "{!JSENCODE(l.Name)}",
                "category": "{!JSENCODE(l.g2maps__Category__c)}",
                "visible": {!l.g2maps__Default__c},
                "id": "g2_other_{!JSENCODE(l.Name)}",
                "title": "{!JSENCODE(l.Name)}",//same as name
                "thumbnailUrl": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/other_layer.png')}",
                "active": {!l.g2maps__Default__c},
                "displayOrder": {!BLANKVALUE(l.g2maps__Display_Order__c, 99)},
                "sortOrder": {!BLANKVALUE(l.g2maps__Sort_Order__c, 99)},
                "username": "{!JSENCODE(settings.AGOL_Username)}",
                "token": "{!JSENCODE(AGOLToken)}"
            };
            layers.push(otherlayerInfo);
        </apex:repeat>              

        <apex:repeat value="{!ObjectLayerInfos}" var="l">
            var size, height, width, angle, xoffset, yoffset, min, max;
            size = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__Size__c, 0)}');
            height = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__Height__c, 0)}');
            width = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__Width__c, 0)}');
            angle = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__Angle__c, 0)}');
            xoffset = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__xOffset__c, 0)}');
            yoffset = parseFloat('{!BLANKVALUE(l.DefaultSymbol.g2maps__yOffset__c, 0)}');
            min = parseFloat('{!BLANKVALUE(l.objLayer.g2maps__Scale_Min__c,0)}');
            max = parseFloat('{!BLANKVALUE(l.objLayer.g2maps__Scale_Max__c,0)}');
            renderInfo = {
                "magicRenderer": {!AND(l.objLayer.g2maps__Renderer__c == 'g2.unique', NOT(IsNull(l.DefaultSymbol)))},
                "renderer_field": "{!JSEncode(l.objLayer.g2maps__Renderer_Field__c)}",
                "style":"{!JSEncode(l.DefaultSymbol.g2maps__Style__c)}",
                "size":  size,
                "url":"{!JSEncode(l.DefaultSymbol.g2maps__URL__c)}",
                "height": height,
                "width": width,
                "type": "{!l.DefaultSymbol.g2maps__Type__c}",
                "angle": angle,
                "xoffset": xoffset,
                "yoffset": yoffset
            };
            layerInfo = {// anything below is configurable
                "type": "G2Maps::ObjectLayer",
                "strInfoTemplate": "{!JSENCODE(l.objLayer.g2maps__InfoWindow__c)}",
                "mode": esri.layers.FeatureLayer.MODE_ONDEMAND,
                "outFields": ["*"],
                "opacity": {!(l.objLayer.g2maps__Opacity__c * 1.0) / 100.0},
                "name": "{!JSENCODE(l.objLayer.Name)}",
                "category": "{!JSENCODE(l.objLayer.g2maps__Category__c)}",
                "url": "{!JSENCODE(l.FeatureLayerURL)}",
                "htmlPopupType": esri.layers.FeatureLayer.POPUP_NONE,
                "maxScale": max,
                "minScale": min,
                "visible": {!l.objLayer.g2maps__Default__c},
                "id": "g2_sf_{!JSENCODE(l.objLayer.Name)}",
                "title": "{!IF(l.objLayer.g2maps__InfoWindow_ShowLayerName__c,JSENCODE(l.objLayer.Name + ' - '), '')}{{!JSENCODE(l.objLayer.g2maps__Field_Name__c)}}",
                "thumbnailUrl": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/feature_layer.png')}",
                "active": {!l.objLayer.g2maps__Default__c},
                "filter":"{!JSEncode(l.Filter)}",
                "enableCluster" : {!l.objLayer.g2maps__Enable_Cluster__c},
                "clustersFillColor": "{!l.objLayer.g2maps__Clusters_FillColor__c}",
                "render": renderInfo,
                "displayOrder": {!BLANKVALUE(l.objLayer.g2maps__Display_Order__c, 99)},
                "sortOrder": {!BLANKVALUE(l.objLayer.g2maps__Sort_Order__c, 99)}
            };
            layers.push(layerInfo);             
        </apex:repeat>
            var zoomLevel = parseInt('{!IF(NOT(IsNull(objLayer)), BLANKVALUE(objLayer.g2maps__Zoom_Level__c, 10), 10)}');
            var quickmap = {!AND(NOT(IsNull(Layer1)), NOT(IsNull(Filter1)))};//TODO better idea?
            var initSettings = {
                "isESRIBaseMap": {!settings.orgSettings.g2maps__Base_Provider__c == 'ESRI' || settings.orgSettings.g2maps__Base_Provider__c == null},
                "isOSMBaseMap": {!settings.orgSettings.g2maps__Base_Provider__c == 'OSM'},
                "defaultBaseType": '{!JSENCODE(settings.orgSettings.g2maps__Base_Type__c)}',
                "defaultBaseEndpoint": '{!JSENCODE(settings.orgSettings.g2maps__Base_Endpoint__c)}',
                "defaultWSEN":[{!NullValue(settings.Override_Include.g2maps__Include_West__c, -130)}, {!NullValue(settings.Override_Include.g2maps__Include_South__c, 20)}, {!NullValue(settings.Override_Include.g2maps__Include_East__c, -60)}, {!NullValue(settings.Override_Include.g2maps__Include_North__c, 45)}],
                "address": {
                      Address : "{!JSENCODE(Street)}",
                      City: "{!JSENCODE(City)}",
                      State: "{!JSENCODE(State)}",
                      PostalCode: "{!JSENCODE(PostalCode)}",
                      Country: "{!JSENCODE(Country)}",
                      lat: "{!Latitude}",
                      lng: "{!Longitude}"
                },
                "geocode": {!AND(NOT(IsNull(objLayer)), objLayer.g2maps__Geocode_Live__c, objLayer.g2maps__Edit_Location__c)},
                "addressChange": {!AND(NOT(IsNull(objLayer)), objLayer.g2maps__Geocode_AddressChange__c, objLayer.g2maps__Edit_Address__c)},
                "proxyUrl": "{!JSENCODE(settings.URL_Proxy)}",
                "ServiceAreaTask": "{!JSENCODE(settings.URL_ServiceAreaTask)}",
                "GeometryTask": "{!JSENCODE(settings.URL_GeometryTask)}",
                "routeTask": "{!JSENCODE(settings.URL_RouteTask)}",
                "euroRouteTask": "{!JSENCODE(settings.URL_EuroRouteTask)}",
                "locatorTask": "{!JSENCODE(settings.URL_GeocodeTask)}",
                "enforceSecurity": {!settings.EnforceSecurity},
                "appID": "g2_{!$Organization.Id}",
                "BAOToken": "{!JSENcode(BAOToken)}",
                "AGOL": {
                    "username": "{!JSENCODE(settings.AGOL_Username)}",
                    "token": "{!JSENCODE(AGOLToken)}"
                },
                "TokenURL": "https://baoapi.esri.com/rest/authentication",
                TemplateURL: "https://baoapi.esri.com/rest/report/GetReportTemplates",
                "ReportURL": "https://baoapi.esri.com/rest/report/SummaryReports",
                GeographyURL: "https://baoapi.esri.com/rest/report/ReturnStdGeography",
                ThematicURL: "https://baoapi.esri.com/rest/maps/ThematicQuery",
                AGOL_Portal: "{!JSENCODE(settings.URL_AGOL)}",
                "onlineHelpUrl": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/index.htm')}",
                "quickMap" : quickmap,
                "restoreBookmark": {!($CurrentPage.Name != 'g2maps__DrivingDirections')} && !quickmap,
                "liveGeoZoomLevel": zoomLevel,
                "layers": layers,
                "isMobile": {!IsMobile},
                "socialEnabled": {!IsOrgChatter},
                "esriLayerIcon": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/esri.png')}",
                "sfLayerIcon": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/sf.png')}",
                "otherLayerIcon": "{!URLFOR($Resource.g2maps__G2Maps, 'resources/other_layer.png')}",                
                "devmode": {!BLANKVALUE($CurrentPage.parameters.devmode, 'false')},
                "checkInDelay": {!NULLVALUE(settings.CheckIn_Delay, 0)}
            };
            g2 = new G2Maps.component.map();
            g2.go(
                {"view": {
                    "context": "g2map",
                    "pos": "first"
                },
                "model" : {
                    "initSettings": initSettings
                }
            }); 
            // Live Geo
            //if ({!AND(hasAddress, NOT(IsNull(objLayer)), objLayer.g2maps__Geocode_Live__c, NOT(hasLocation))}) {
            if ({!AND(NOT(IsNull(objLayer)), objLayer.g2maps__Geocode_Live__c, NOT(hasLocation))}) {
                var autoGeocodeConnector;
                autoGeocodeConnector = dojo.connect(g2.presenter, "onGeocoded", function(candidate) {
                    dojo.disconnect(autoGeocodeConnector);
                    if (!candidate) return;
                    candidate.accuracy = candidate.accuracy || candidate.attributes.accuracy || candidate.attributes.MatchLevel;
                    candidate.score  = candidate.score || candidate.attributes.Score;
                    console.log ('Found Location');
                    console.dir(candidate);
                    if ((candidate.accuracy === "houseNumber" || candidate.accuracy === "rooftop" ) && candidate.score > 50.0) {
                        console.log ('Saved Location');
                        jsSaveLocation(candidate.location.y, candidate.location.x, 'Automatic match');
                    }
                    else if ((candidate.accuracy === "street" || candidate.accuracy === "postal" || candidate.accuracy === "city" || candidate.accuracy === "postalCode" || candidate.accuracy === "POI") && {!AND(NOT(IsNull(objLayer)), objLayer.g2maps__Geocode_Regional__c)}) {
                        console.log ('In');
                        jsSaveLocation(candidate.location.y, candidate.location.x, 'Approximate match');
                    }
                });
            }
            // Manual Update 
            if (initSettings.geocode) {
                dojo.connect(g2.presenter, "onManualUpdate", function(x,y) {
                    jsSaveLocation(y, x, 'Custom location');
                });             
            } 
            // Check-In
            dojo.connect(g2.presenter, "onCheckIn",function(lon,lat,accuracy,stringLocation,objId,layerName) {
                jsCheckIn(lat, lon, accuracy, stringLocation, objId, layerName);
            });
            // Chatter post
            dojo.connect(g2.presenter, "onSocialPost", function(chatterPostBody,objId,layerName) {
                jsChatterPost(chatterPostBody,objId);
            });
     }
     dojo.ready(function() {
         dojo.addClass(dojo.body(), "tundra");
         init();
     });
    </script>
    <apex:stylesheet value="{!URLFOR($Resource.g2maps__G2Maps, 'resources/G2Styles.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.g2maps__G2Maps, 'G2Mappings.js')}"/>

</apex:component>