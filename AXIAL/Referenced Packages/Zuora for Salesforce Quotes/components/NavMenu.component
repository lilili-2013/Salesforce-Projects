<apex:component access="global" selfClosing="true">
  
  <apex:attribute description="The NavMenu component's configuration options" name="options" required="true" type="zqu.NavMenuOptions" access="global" />
  
  <apex:includeScript value="{!$Resource.zqu__jquery_1_9_1}" />

  <!-- include pub/sub little utility -->
  <apex:includeScript value="{!URLFOR($Resource.ImagesAndJavascriptZip,
      '/js/pubsubz-compressed.js')}" />
  
  <script>
    
    var $jq = jQuery.noConflict();
    
    if (typeof selectedItem === 'undefined') var selectedItem = {};
  
    onClickMenuItem = function(element){
      if(window.console && console.log) console.log(element + ' is clicked');
      // Change css of selected item
      var newlySelectedItem = $jq(element);
      newlySelectedItem.removeClass('mouseover');
      newlySelectedItem.addClass('selected');
      
      // Get newly selected item information
      var elementId = newlySelectedItem.attr('id');
      var elementLabel = newlySelectedItem.attr('label');
      var elementIsDefault = newlySelectedItem.attr('idDefault');
      
      if(selectedItem.id){
        if(selectedItem.id != elementId){
          
          // Remove previous selected item
          $jq("li[id='"+ selectedItem.id +"']").removeClass('selected');
          
          // Add breadcrumb
          if('{!options.breadcrumbComponentName}' != ''){
            // Remove previous seleted breadscrum first
            window['breadcrumbs']['{!options.breadcrumbComponentName}'].remove(selectedItem.id);
            // Add breadcrumb
            window['breadcrumbs']['{!options.breadcrumbComponentName}'].append(elementId, elementLabel);
          }
          
          // Store the selected item information
          selectedItem.id = elementId;
          selectedItem.label = elementLabel;
          selectedItem.isDefaultValue = elementIsDefault;
          
          // Refresh quick list
          addSoqlFragmentToQuickList(elementId);
        }
      }
      else{
        // Add breadcrumb
        if('{!options.breadcrumbComponentName}' != ''){
          window['breadcrumbs']['{!options.breadcrumbComponentName}'].append(elementId, elementLabel);
        }
        
        // Store the selected item information
        selectedItem.id = elementId;
        selectedItem.label = elementLabel;
        selectedItem.isDefaultValue = elementIsDefault;
        
        // Refresh quick list
        addSoqlFragmentToQuickList(elementId);
      }
      
    }
    
    onMouseOverMenuItem = function(element){
      if($jq(element)[0].className.indexOf('selected') < 0){
        $jq(element).addClass('mouseover');
      }
    }
    
    onMouseOutMenuItem = function(element){
      $jq(element).removeClass('mouseover');
    }

    // Subscribe to the "item deleted from breadcrump" topic
    pubsubz.subscribe(Topic.BREADCRUMB_ITEM_DELETED, function (topics, data) {
      // Remove selected item from navigation menu
      $jq("li[id='"+ data.id +"']").removeClass('selected');
      if (selectedItem && selectedItem.id == data.id) {
        selectedItem = {};
        // Refresh quick list
        removeSoqlFragmentFromQuickList();
      }
    });
    
    addSoqlFragmentToQuickList = function(selectedItemId){
      if('{!options.quickListComponentName}' != ''){
        
        // Remove previous added soqlFragments first
        LocalStorageUtils.resetComponentFragment('{!options.quickListComponentName}', LocalStorageUtils.NAVIGATION_COMPONENT);
        
        var soqlFragments = (selectedItemId == 'allItems') ? '' : ('{!options.filterFieldName} = \'' + selectedItemId + '\'');
        LocalStorageUtils.storeSoqlFragment('{!options.quickListComponentName}', LocalStorageUtils.NAVIGATION_COMPONENT, soqlFragments);
        
        // redraw the list
        if (typeof({!options.quickListComponentName}Redraw) !== 'undefined') {!options.quickListComponentName}Redraw();
      }
    }
    
    removeSoqlFragmentFromQuickList = function(){
      if('{!options.quickListComponentName}' != ''){
        LocalStorageUtils.resetComponentFragment('{!options.quickListComponentName}', LocalStorageUtils.NAVIGATION_COMPONENT);
        // redraw the list
        if (typeof({!options.quickListComponentName}Redraw) !== 'undefined') {!options.quickListComponentName}Redraw();
      }
    }
    
    
  </script>
  
  <style>
    .nav-menu {
      height: 90%;
      padding-right: 10px;
      padding-top: 20px;
    }
    
    .nav-menu-title {
      font-size: 11px;
      font-weight: bold;
    }
    
    .nav-menu ul{
      list-style: none;
      padding: 0;
    }
    
    .nav-menu li {
      margin-left: 0;
      padding-left: 14px;
      height: 28px;
      line-height: 28px;
    }
    
    .nav-menu li.selected {
      background: #E8F1C7 url("{!URLFOR($Resource.zqu__ImagesAndJavascriptZip, '/images/nav-menu-arrow.png')}") 5px 10px no-repeat;
    }
    
    .nav-menu li.mouseover {
      background: #E5E5E5;
      cursor: pointer;
    }
    
    
  </style>
  
  <div class="nav-menu">
    <div class="nav-menu-title">{!options.header}</div>
    <ul>
      <apex:repeat value="{!options.navMenuItems}" var="item">
        <li id="{!item.id}" 
            label="{!item.label}" 
            isDefault="{!item.isDefaultValue}" 
            class="{!IF(options.defaultSelection != null, IF(options.defaultSelection == item.id, 'selected', ''), IF(item.isDefaultValue, 'selected',''))}"
            onclick="onClickMenuItem(this)" 
            onmouseover="onMouseOverMenuItem(this)" 
            onmouseout="onMouseOutMenuItem(this)">
          {!item.label}
        </li>
      </apex:repeat>
    </ul>
  </div>
  <script>
   (function() {
       if(window.console && console.log) console.log('set nav menu.');
       var defaultSelectedItem = $jq("li[class*='selected']", $jq("div[class~='nav-menu']"));
       if(defaultSelectedItem.length > 0){
         selectedItem.id = defaultSelectedItem.attr('id');
         selectedItem.label = defaultSelectedItem.attr('label');
         selectedItem.isDefaultValue = Boolean(defaultSelectedItem.attr('isDefault'));
         
         if('{!options.breadcrumbComponentName}' != ''){
           window['breadcrumbs']['{!options.breadcrumbComponentName}'].append(selectedItem.id, selectedItem.label);
         }
         
         if('{!options.quickListComponentName}' != ''){
           // Remove previous added soql fragment from local storage then add initial soql fragment to quick list
           LocalStorageUtils.resetComponentFragment('{!options.quickListComponentName}', LocalStorageUtils.NAVIGATION_COMPONENT);
           var soqlFragments = (selectedItem.id == 'allItems') ? '' : ('{!options.filterFieldName} = \'' + selectedItem.id + '\'');
           LocalStorageUtils.storeSoqlFragment('{!options.quickListComponentName}', LocalStorageUtils.NAVIGATION_COMPONENT, soqlFragments);
         }
       }
    })();
  </script>
</apex:component>