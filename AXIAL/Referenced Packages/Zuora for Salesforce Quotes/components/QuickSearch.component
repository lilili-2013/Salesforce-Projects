<apex:component selfClosing="true" access="global">

  <apex:attribute name="listName" required="true" type="String"
      access="global" description="Associated quicklist name." />

  <apex:variable var="breadcrumbName" value="{!listName}_breadcrumb" />

  <!-- include LocalStorageUtils for retrieving SOQL fragment if any -->
  <apex:includeScript value="{!URLFOR($Resource.ImagesAndJavascriptZip,
      '/js/LocalStorageUtils-compressed.js')}" />

  <!-- include pub/sub little utility -->
  <apex:includeScript value="{!URLFOR($Resource.ImagesAndJavascriptZip,
      '/js/pubsubz-compressed.js')}" />

  <style type="text/css">
  .btn-search {
    background: url('/img/func_icons/util/lookup20.gif');
    background-repeat: no-repeat;
    background-position: top left;
    height: 20px;
    width: 21px;
    border-width: 0px;
  }
  .btn-search:hover {
    background-position: -22px;
    cursor: pointer;
  }
  .quicksearch-container {
    background-color: #F2F2F2;
    padding: 10px 10px 10px 10px;
    margin-bottom: 10px;
    margin-top: 10px;
  }
  .quicksearch-hr {
    border: 0;
    height: 1px;
    background-color: #ccc;
  }
  </style>

  <div class="quicksearch-container">

    <form id="{!breadcrumbName}-form">
      <p>
        <b>Search:</b>
        <input type="text" name="q" size="50" id="{!breadcrumbName}-query" />
        <input type="submit" class="btn-search" value=" " id="{!breadcrumbName}-search" />
      </p>
    </form>

    <hr class="quicksearch-hr" />

    <c:Breadcrumb name="{!breadcrumbName}" />

  </div>

  <script type="text/javascript">
  (function (window, document) {

    var queryField = document.getElementById('{!breadcrumbName}-query');
    var btnSubmit = document.getElementById('{!breadcrumbName}-search');

    var tagsToReplace = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;'
    };

    function replaceTag(tag) {
      return tagsToReplace[tag] || tag;
    }

    function safeTagsReplace(str) {
      return str.replace(/[&<>]/g, replaceTag);
    }

    function searchSubmit() {
      var queryId = queryField.value.replace(/[^a-zA-Z0-9]/g, "");
      var value = safeTagsReplace(queryField.value);
      window.breadcrumbs.{!breadcrumbName}.append(queryId, value);
      // store it to localstorage
      LocalStorageUtils.storeSoqlFragment('{!listName}',
          LocalStorageUtils.QUICKSEARCH_COMPONENT, queryField.value);
      // redraw the list
      queryField.value = '';
      queryField.focus();
      if (typeof({!listName}Redraw) !== 'undefined'){
        if(zSelectedElements['{!listName}']){
          zSelectedElements['{!listName}'] = new ZSet();
        }
        {!listName}Redraw();
      }
      queryField.value = '';
      queryField.focus();
    }

    // Prevent form submission when the "Return" key is pressed
    queryField.addEventListener('keypress', function (e) {
      if (e.keyCode === 13) {
        e.preventDefault();
        searchSubmit();
      }
    }, false);

    btnSubmit.addEventListener('click', function (e) {
      e.preventDefault();
      searchSubmit();
    }, false);

    // Subscribe to the "item deleted from breadcrump" topic
    pubsubz.subscribe(Topic.BREADCRUMB_ITEM_DELETED, function (topics, data) {
      if (data.breadcrumbName && data.breadcrumbName === '{!breadcrumbName}') {
        LocalStorageUtils.removeSoqlFragment('{!listName}',
            LocalStorageUtils.QUICKSEARCH_COMPONENT, data.removed);
        // redraw the list
        if (typeof({!listName}Redraw) !== 'undefined') {!listName}Redraw();
      }
    });


  }(this, this.document));
  </script>

</apex:component>