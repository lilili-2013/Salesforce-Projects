<apex:component layout="none" selfClosing="true" access="global">
<apex:includeScript value="{!$Resource.zqu__jquery_1_9_1}" />
<apex:includeScript value="{!$Resource.zqu__jquery_tablesorter}" />
<script type="text/javascript">
var $jq = jQuery.noConflict();

var allowAction = false;
$jq(document).ready(function(){
//  console.log('doc ready from ListComponentJS.component...');
    allowAction = true;
});

function getDataCell(instanceName, recordId, fieldName) {
  var filter = "#" +instanceName+ "\\:" +recordId+ "\\:" +fieldName;
  return $jq(filter);
}

// this will click all of the undo links for any fields that have changed
function resetChangedData(instanceName) {
  var filter = "#" +instanceName+ "\\:innerTable .inlineEditUndoLink";

  var undoLinks = $jq(filter);
  for (var i = 0; i < undoLinks.length; i++) {
    undoLinks[i].click();
  }
}

// used in single select mode to assign the Id value to the hidden field when the radio button is clicked
// quicker and more lightweight than using the VF apex:selectRadio tag
function setSelectedId(instanceName, selectedId) {
  var filter = "#" +instanceName+ "\\:selectedId :first-child";
  var e = $jq(filter);
  if (e.length > 0) e.val(selectedId).change();
}

// used in multi select mode to set selected ids to javascript variable
function setSelectedIds(instanceName, selectedId, checkbox) {
  var selectedIds = window[instanceName+"_selectedIds"];
  if(selectedIds != undefined){
    if(checkbox.checked){
      if(selectedIds.indexOf(selectedId) == -1)
        selectedIds.push(selectedId);
    }
    else{
      if(selectedIds.indexOf(selectedId) != -1)
        selectedIds.splice(selectedIds.indexOf(selectedId), 1);
    }
  }
} 

// enables the clicking of any cell in a row to click the checkbox or radio button in that row
function checkSelected(e, isSelectMode) {   
  if (!isSelectMode) return;
  var o = $jq(e).find(":input[class=selectControl]");
  if (o.length > 0) o.click();
}

// sets the element with the passed id to be displayed
function showStatus(instanceName) {
  displayStatusModal();
}

function hideStatus(instanceName) {
  closeStatusModal();
}

function setIsChanged(instanceName, recordId) {
  var e = $jq("#" +instanceName+ "\\:" +recordId+ "\\:isChanged :first-child");
  if (e.length > 0) e[0].value = true;
}

function setHasChanges(instanceName) {
  var e = $jq("#" +instanceName+ "\\:hasChanges :first-child");
  if (e.length > 0) e[0].value = true;
}

function sortBy(thElement, instanceName, fieldName, direction, multiplePages) {
  if (!allowAction) return false;
  
  if (multiplePages) {
    showStatus(instanceName+"\\:pageChangeStatus");
    setSelectedId(instanceName, '');
    var f = $jq("#" +instanceName+ "\\:sortField :first-child");
    var d = $jq("#" +instanceName+ "\\:sortDirection :first-child");
    var functionEval = instanceName + "_doSort();";
  
    if (f.length > 0 && d.length > 0) {
      f[0].value = fieldName;
      d[0].value = direction;
    }
    eval(functionEval);
  } else {

    // sort will happen, so need to change the arrows and such here
//    console.log('NO MULTIPLE PAGES ... do client side only...');
  }
}
</script>
</apex:component>