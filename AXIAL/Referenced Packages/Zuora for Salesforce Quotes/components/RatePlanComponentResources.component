<apex:component layout="none" selfClosing="true" access="global" controller="zqu.RatePlanComponentRemoter">

<!-- list component resources -->
<c:ListComponentJS />
<c:ListComponentCSS />
<apex:includeScript value="{!URLFOR($Resource.zqu__ImagesAndJavascriptZip, '/js/jquery-ui-1.10.3.custom-compressed.js')}" />
<apex:styleSheet value="{!URLFOR($Resource.zqu__ImagesAndJavascriptZip, 'jquery-ui-1103.css')}" />

<script type="text/javascript">
var namespace = '{!namespacePrefix}'.toLowerCase();
var rpcPreviousValues = {};

function getFieldGroup(quoteId, customLabels) {
  var fieldGroup;
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.RatePlanComponentRemoter.getFieldGroup}',
    quoteId,
    customLabels,
    function(result,event) {
      if(window.console && console.log) console.log('Status ... ' +event.status);
      if(window.console && console.log) console.log(result);
      fieldGroup = result;
    },
    {escape:true}
  );
  return fieldGroup;
}

function onFieldChange(inputElement, originalValue, instanceName, quoteId, chargeRecordId, chargeGroupId, changingField) {

  // store the most previous value so that the value can be reset if validation fails
  if (rpcPreviousValues[instanceName] == null) rpcPreviousValues[instanceName] = {};
  if (rpcPreviousValues[instanceName][changingField] == null) rpcPreviousValues[instanceName][changingField] = {};
  if (rpcPreviousValues[instanceName][changingField][chargeRecordId] == null) rpcPreviousValues[instanceName][changingField][chargeRecordId] = originalValue;

  // validate that the new value is a number
  if (isNaN(inputElement.value)) {
    if(window.console && console.log) console.log(instanceName+ ',' +chargeRecordId+ ',' +changingField+ ' value ' +inputElement.value+ ' failed validation...');
    inputElement.value = rpcPreviousValues[instanceName][changingField][chargeRecordId];
    return;
  }

  // data is valid -- start the status modal
  displayStatusModal();
  
  // get the field values -- getInputValue() will get the value from the input form, getActualValue() will get the field value if
  // the record isn't editable

  var discount = getInputValue(instanceName, chargeRecordId, namespace + 'discount__c');
  if (discount == null) discount = getActualValue(instanceName, chargeRecordId, namespace + 'discount__c');

  var effectivePrice = getInputValue(instanceName, chargeRecordId, namespace + 'effectiveprice__c');
  if (effectivePrice == null) effectivePrice = getActualValue(instanceName, chargeRecordId, namespace + 'effectiveprice__c');

  var quantity = getInputValue(instanceName, chargeRecordId, namespace + 'quantity__c');
  if (quantity == null) quantity = getActualValue(instanceName, chargeRecordId, namespace + 'quantity__c');

  var total = getInputValue(instanceName, chargeRecordId, namespace + 'total__c');
  if (total == null) total = getActualValue(instanceName, chargeRecordId, namespace + 'total__c');

  // build the map that will be passed to the remote function
  var newValues = {};
  newValues[(namespace + 'discount__c')]        = discount;
  newValues[(namespace + 'effectiveprice__c')]  = effectivePrice;
  newValues[(namespace + 'quantity__c')]        = quantity;
  newValues[(namespace + 'total__c')]           = total;

  if(window.console && console.log) console.log(newValues);
  
  // call the remote function
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.RatePlanComponentRemoter.onFieldChange}',
    newValues,
    quoteId,
    chargeRecordId,
    chargeGroupId,
    changingField,

    // function to process results, needs to be anonymous to get instance and id data from parameters
    function(result, event) {
		  if(window.console && console.log) console.log(event);
		  if(window.console && console.log) console.log(result);

		  if (event.status) {
		    // store this value as the previous value
        rpcPreviousValues[instanceName][changingField][chargeRecordId] = inputElement.value;

	      var discount = getInputElement(instanceName, chargeRecordId, namespace + 'discount__c');
	      if (discount != null) discount.value = result[namespace + 'discount__c'];
	      
	      var effectivePrice = getInputElement(instanceName, chargeRecordId, namespace + 'effectiveprice__c');
        if (effectivePrice != null) effectivePrice.value = result[namespace + 'effectiveprice__c'];

	      var quantity = getInputElement(instanceName, chargeRecordId, namespace + 'quantity__c');
        if (quantity != null) quantity.value = result[namespace + 'quantity__c'];

	      var total = getInputElement(instanceName, chargeRecordId, namespace + 'total__c');
        if (total != null) total.value = result[namespace + 'total__c'];
            
        if(window.console && console.log) console.log(discount);
        if(window.console && console.log) console.log(effectivePrice);
        if(window.console && console.log) console.log(quantity);
        if(window.console && console.log) console.log(total);
		  }

      closeStatusModal();

      // if there was an error, output the message
      // TODO: refactor to send this message into the notification component
      if (!event.status) {        
        alert('Error:\n\n' +event.message);
      }
    },
    {escape:true}
  );  
}

function getInputElement(instanceName, recordId, fieldName) {
  var input;
  var cell = getDataCell(instanceName, recordId, fieldName);

  if (cell.length > 0) {
    input = cell.find(":input[type=text]");
    if (input.length > 0) { 
      return input[0];
    }
  }
  return null;
}

function getInputValue(instanceName, recordId, fieldName) {
  var input = getInputElement(instanceName, recordId, fieldName);
  if (input == null) return null;
  return input.value;
}

function getActualValue(instanceName, recordId, fieldName) {
  var value;
  var cell = getDataCell(instanceName, recordId, fieldName);

  if (cell.length > 0) {
    value = cell.find(".actualValue");
    if (value.length > 0) { 
      return value.html();
    }
  }

  return null;
}
</script>

<!--  rate plan component specific CSS modifications to the list component CSS -->
<style>
table.outerTable, table.innerTable {
  width: 100%;
}

div.removed {
}

div.removed td.dataCell, div.removed td.description {
  text-decoration: line-through;
}

td.numericField input[type="text"] {
  text-align: right;
  width: 70%;
}

.actualValue {
  display: none;
}

tr.dataRow {
  background-color: white;
}

div.ratePlanComponentPanel {
  background-color: #F2F2F2; 
  padding-top: 8px;
  padding-left: 7px;  
  padding-right: 7px;
/*  padding: 5px 5px 5px 5px; */
}

span.status {
  display: block;
  position: absolute;
  right: 0;
  top: 0;
  padding: 2px 2px 2px 3px;
  color: #ffffff;  
  font-weight: bold;
}

.ui-widget-header {
  background-color: #6FB43F;
}
.zqu-widgent-content {
  border-color: #579831;
}
</style>

<!-- modals/animations -->
<c:StatusModal statusMessage="Loading..." />
</apex:component>