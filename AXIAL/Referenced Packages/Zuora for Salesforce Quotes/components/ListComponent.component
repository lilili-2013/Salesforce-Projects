<apex:component allowDML="true" access="global" layout="none" controller="zqu.ListComponentController">
<apex:attribute name="options" assignTo="{!lcc.theOptions}" access="global" type="zqu.ListComponentOptions" description="The ListComponent's configuration options." />

<!-- other components -->
<c:ListComponentJS rendered="{!NOT(lcc.theOptions.multipleListComponents)}" />
<c:ListComponentCSS rendered="{!NOT(lcc.theOptions.useCustomCSS) && NOT(lcc.theOptions.multipleListComponents)}" />
<c:StatusModal statusMessage="Loading..." rendered="{!NOT(lcc.theOptions.multipleListComponents)}" />

<!-- declaring/setting VF variables to be used as needed when rendering the record display -->
<apex:variable var="cellType"           value="" />
<apex:variable var="readOnly"           value="" />
<apex:variable var="isSelectMode"       value="{!lcc.isModeEnabled['singleSelect'] || lcc.isModeEnabled['multiSelect']}" />
<apex:variable var="isEditMode"         value="{!lcc.isModeEnabled['edit'] || lcc.isModeEnabled['inlineEdit']}" />
<apex:variable var="instanceName"       value="{!lcc.theOptions.instanceName}" />
<apex:variable var="multipleDataPages"  value="{!(lcc.numPages > 1)}" />

<!-- sort variables -->
<apex:variable var="sortAsc"            value="asc" />
<apex:variable var="sortDesc"           value="desc" />
<apex:variable var="newSortDirection"   value="" />
<apex:variable var="sortDisabled"       value="" />
<apex:variable var="isSortable"         value="" />
<apex:variable var="sortThClasses"      value="" />
<apex:variable var="sortDivClasses"     value="" />
<apex:variable var="thisFieldSorted"    value="" />

<!-- variables for setting element ids; will handle non-inserted data -->
<apex:variable var="trId"               value="" />
<apex:variable var="tdId"               value="" />
<apex:variable var="rowNum"             value="{!0}" />
<apex:variable var="rowId"              value="" />

<!-- reference to the parent controller that can be used by the component body -->
<apex:variable var="listParentController" value="{!lcc.theOptions.parentController}" />

<script type="text/javascript">
$jq(document).ready(function(){
  
  // Store the selected ids in multiSelect mode, used for javascript only.
  if({!lcc.isModeEnabled['multiSelect']}){
    {!instanceName}_selectedIds = [];
  }
  
  var multiplePages = {!multipleDataPages};
  var sortOptionDisabled = {!lcc.theOptions.disableSort};

  if (!multiplePages && !sortOptionDisabled) {
    var filter = "#{!instanceName}\\:innerTable";
    $jq(filter).tablesorter({
      debug : false,
      textExtraction : function(node) {
        var sortValue = $jq(node).find(".sortValue").html();        
        return sortValue;
      }
    });
  }
});
</script>

<!-- only render the click event binding when in inlineEdit mode -->
<apex:outputText rendered="{!lcc.isModeEnabled['inlineEdit']}">
<script type="text/javascript">
$jq("[id$={!instanceName}\\:outerTable]").ready(function() {
//  console.log('outerTable ready from ListComponent.component...');
  $jq(".inlineEditWrite").bind('click', function(evt) {
    setHasChanges("{!instanceName}");
    var idParts = evt.currentTarget.parentNode.parentNode.id.split(':');
    if (idParts.length > 1) {
      var instanceName = idParts[0];
      var recordId = idParts[1];
      setIsChanged(instanceName, recordId);
    }
  });
});
</script>
</apex:outputText>

<apex:actionFunction name="{!instanceName}_doSort" action="{!lcc.doSort}" />

<!-- these spans contain hidden input elements bound to controller variables. putting them in standard html elements allows for the setting of dynamic element ids -->
<span id="{!instanceName}:selectedId"><apex:inputHidden value="{!lcc.selectedId}" /></span>
<span id="{!instanceName}:hasChanges"><apex:inputHidden value="{!lcc.hasChanges}" /></span>
<span id="{!instanceName}:sortField"><apex:inputHidden value="{!lcc.sortField}" /></span>
<span id="{!instanceName}:sortDirection"><apex:inputHidden value="{!lcc.sortDirection}" /></span>

<apex:outputText rendered="{!lcc.optionsValid}">

<div class="listComponentPanel" id="{!instanceName}:listComponentPanel">
  <table class="outerTable" id="{!instanceName}:outerTable">
    <tbody>

      <!-- search box and buttons -->
      <apex:outputText rendered="{!NOT(lcc.theOptions.hideSearch)}">
      <tr>
        <td style="text-align: right;" id="{!instanceName}:defaultSearchCell">
          <apex:inputText value="{!lcc.searchStr}" />
          <apex:commandButton value="Search" onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.processSearch}" />
          <apex:commandButton value="Clear Results" onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.clearResults}" />
        </td>
      </tr>
      </apex:outputText>

      <tr id="{!instanceName}:dataGridRow">
        <td>
          <table class="innerTable bPageBlock tablesorter" id="{!instanceName}:innerTable">

            <thead>
              <tr>          

                <!-- for single select or multi select mode, render an additional leading column -->
                <apex:outputText rendered="{!isSelectMode}">
                  <th class="{sorter: false} select_column_header">&nbsp;</th>
                </apex:outputText>

                <!-- write each column header -->
                <apex:repeat var="f" value="{!lcc.fsw.fields}">
                  <apex:variable var="fname" value="{!LOWER(f.name)}" />
                  <apex:variable var="isSortable" value="{!(NOT(lcc.theOptions.disableSort) && f.isSortable)}" />
                  <apex:variable var="sortDisabled" value="{!IF(isSortable, '', 'return false; ')}" />
                  <apex:variable var="newSortDirection" value="{!IF(lcc.sortDirection == sortAsc, sortDesc, sortAsc)}" />
                  <apex:variable var="newSortDirection" value="{!IF(lcc.sortField != fname, sortAsc, newSortDirection)}" />                  
                  <apex:variable var="thisFieldSorted" value="{!(fname == lcc.sortField)}" />
                  <apex:variable var="sortThClasses" value="{!IF(f.isNumber || f.isDateOrTime, 'numericField', 'textField')}" />
                  <apex:variable var="sortThClasses" value="{!sortThClasses}{!IF(isSortable, ' sortable', '')}" />
                  <apex:variable var="sortDivClasses" value="{!IF(thisFieldSorted && (lcc.sortDirection == sortAsc), 'sortUp', '')}" />
                  <apex:variable var="sortDivClasses" value="{!IF(thisFieldSorted && (lcc.sortDirection == sortDesc), 'sortDown', sortDivClasses)}" />                  

                  <th onclick="{!sortDisabled}sortBy(this, '{!instanceName}', '{!fname}', '{!newSortDirection}', {!multipleDataPages});" class="{!sortThClasses}">
                    <div class="{!sortDivClasses}"><apex:outputText value="{!f.label}" /></div>
<!-- 
                    <apex:outputPanel layout="inline" rendered="{!thisFieldSorted}">
                      <apex:image value="/s.gif" rendered="{!(lcc.sortDirection == sortAsc)}" title="Sorted ascending - click to re-sort in descending order." />
                      <apex:image value="/s.gif" rendered="{!(lcc.sortDirection == sortDesc)}" title="Sorted descending - click to re-sort in ascending order." />                      
                    </apex:outputPanel>
-->
                  </th>
                </apex:repeat>

              </tr>
            </thead>
        
            <apex:outputText rendered="{!lcc.hasData}">
            <tbody>
              <apex:variable var="rowNum" value="{!0}" />

              <apex:repeat var="rw" value="{!lcc.rws}">
                <apex:variable var="rowId" value="{!IF(lcc.isNewData, TEXT(rowNum), rw.Id)}" />
                <apex:variable var="trId" value="{!instanceName}:{!rowId}" />

                <tr id="{!trId}" class="dataRow">
  
                  <apex:outputText rendered="{!isEditMode}">
                    <span id="{!instanceName}:{!rowId}:isChanged" style="display: none;"><apex:inputHidden value="{!rw.isChanged}" /></span>
                  </apex:outputText>
        
                  <!-- for single select mode, render a column of radio buttons -->
                  <apex:outputText rendered="{!lcc.isModeEnabled['singleSelect']}">
                    <td><input type="radio" class="selectControl" name="recordSelect" onclick="setSelectedId('{!instanceName}', '{!rw.record.Id}');" /></td>
                  </apex:outputText>
          
                  <!-- for multi select mode, render a column of checkboxes -->
                  <apex:outputText rendered="{!lcc.isModeEnabled['multiSelect']}">
                    <td><apex:inputCheckbox styleClass="selectControl" value="{!rw.isSelected}" onclick="setSelectedIds('{!instanceName}', '{!rw.record.Id}', this);"/></td>
                  </apex:outputText>
        
                  <apex:repeat var="f" value="{!lcc.fsw.fields}">
                    <apex:variable var="fname" value="{!LOWER(f.name)}" />
                    <apex:variable var="tdId" value="{!trId}:{!fname}" />
                    <apex:variable var="isSortable" value="{!(NOT(lcc.theOptions.disableSort) && f.isSortable)}" />
                    <apex:variable var="cellType" value="{!IF(f.isNumber || f.isDateOrTime, 'numericField', 'textField')}" />
                    <apex:variable var="readOnly" value="{!IF(NOT(f.isUpdateable),' readOnly','')}" />
                    <apex:variable var="sortValue" value="{!IF(f.isRelField, rw.record[f.relName][f.parentField], rw.record[fname])}" />

                    <td id="{!tdId}" class="dataCell {!cellType}{!readOnly}" onclick="checkSelected(this.parentNode, {!isSelectMode});">

                      <!-- render the  field's actual value in a hidden span to assist in client-side sorting -->
                      <apex:outputText styleClass="sortValue" rendered="{!isSortable}" value="{!sortValue}" />

                      <!-- NON-CUSTOM RENDERING -->
                      <apex:outputText rendered="{!NOT(f.isCustomRendering)}">

	                      <!-- NON-EDIT MODES AND UN-EDITABLE FIELDS: if the Id field is part of the field set, rendering this way will output the 18-character Id, which is better than the 15, otherwise render standard output field -->
	                      <apex:outputText rendered="{!NOT(isEditMode && f.isUpdateable && rw.recordAccess.hasEditAccess)}">
	                        <apex:outputText rendered="{!(fname == 'id')}">{!rw.Id}</apex:outputText>
	                        <apex:outputText rendered="{!(fname != 'id')}">
		                        <apex:outputField value="{!rw.record[fname]}" rendered="{!NOT(f.isRelField)}" />
		                        <apex:outputField value="{!rw.record[f.relName][f.parentField]}" rendered="{!f.isRelField}" />
	                        </apex:outputText>
	                      </apex:outputText>                      
	
	                      <!-- EDIT MODES -->
	                      <apex:outputText rendered="{!(isEditMode && f.isUpdateable && rw.recordAccess.hasEditAccess)}">
	                        <apex:inputField rendered="{!lcc.isModeEnabled['edit']}" value="{!rw.record[fname]}" styleClass="{!cellType}" onchange="setHasChanges('{!instanceName}'); setIsChanged('{!instanceName}','{!rowId}');" required="{!f.isRequired}"/>
	                        <apex:outputField value="{!rw.record[fname]}" rendered="{!lcc.isModeEnabled['inlineEdit']}">
	                          <apex:inlineEditSupport changedStyleClass="changed" event="onclick" />
	                        </apex:outputField>
	                      </apex:outputText>
                      </apex:outputText>
                      
                      <!-- CUSTOM RENDERING -->
                      <apex:componentbody rendered="{!f.isCustomRendering}"/>
                      
                    </td>
                  </apex:repeat>        
                </tr>
                
                <apex:variable var="rowNum" value="{!rowNum+1}" />
              </apex:repeat>
            </tbody>
            </apex:outputText>
            
          </table>        
        </td>
      </tr>

      <!-- render the row for the buttons/page navigation only if the user hasn't hidden them and the mode is appropriate -->
      <apex:variable var="showActionButtons" value="{!NOT(lcc.theOptions.hideActionButtons) && (isEditMode || isSelectMode)}" />
      <apex:variable var="showPaginationNav" value="{!lcc.hasPages && NOT(lcc.theOptions.hidePaginationNav)}" /> 

      <apex:outputText rendered="{!(showActionButtons || showPaginationNav) && lcc.hasData}">
      <tr>
        <td id="{!instanceName}:defaultButtonCell" style="text-align: center;">
        
          <!-- action button panel -->
          <apex:outputPanel layout="block" style="margin-top: 7px;" rendered="{!showActionButtons}">
            <apex:outputText rendered="{!isEditMode}">
              <apex:variable var="buttonPanelID" value="{!instanceName}:updateButtonPanel" />
              <span id="{!buttonPanelID}">
                <apex:commandButton action="{!lcc.processUpdate}" value="{!lcc.theOptions.updateButtonName}" onclick="if (!allowAction) return false; showStatus('{!instanceName}');" />
                <apex:commandButton value="Reset" onclick="resetChangedData('{!instanceName}'); return false;" rendered="{!lcc.isModeEnabled['inlineEdit']}" />
              </span>
            </apex:outputText>        
            <apex:outputText rendered="{!isSelectMode}">
              <apex:variable var="buttonPanelID" value="{!instanceName}:selectButtonPanel" />
              <span id="{!buttonPanelID}">
                <apex:commandButton action="{!lcc.processSelection}" value="{!lcc.theOptions.selectButtonName}" onclick="if (!allowAction) return false; showStatus('{!instanceName}');"/>
              </span>
            </apex:outputText>        
          </apex:outputPanel>  
        
          <!-- pagination navigation -->
          <apex:outputPanel layout="block" style="margin-top: 7px;" rendered="{!showPaginationNav}">
            <apex:actionFunction name="{!instanceName}_jumpToPage" action="{!lcc.jumpToPage}" />
            
            [&nbsp;
            <apex:commandLink onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.first}" value="First" rendered="{!lcc.hasPrevious}" />
            <apex:outputText value="First" rendered="{!NOT(lcc.hasPrevious)}" />
            |&nbsp;
            <apex:commandLink onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.previous}" value="Previous" rendered="{!lcc.hasPrevious}"  />
            <apex:outputText value="Previous" rendered="{!NOT(lcc.hasPrevious)}" />
            |
            Page&nbsp;<apex:inputText style="border: 1px solid black; text-align: center; width: 25px;" value="{!lcc.goToPage}" onchange="if (!allowAction) return false; showStatus('{!instanceName}'); {!instanceName}_jumpToPage();" />&nbsp;of&nbsp;{!lcc.numPages}&nbsp;|&nbsp;
            <apex:commandLink onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.next}" value="Next" rendered="{!lcc.hasNext}"  />
            <apex:outputText value="Next" rendered="{!NOT(lcc.hasNext)}" />
            |&nbsp;
            <apex:commandLink onclick="if (!allowAction) return false; showStatus('{!instanceName}');" action="{!lcc.last}" value="Last" rendered="{!lcc.hasNext}" />
            <apex:outputText value="Last" rendered="{!NOT(lcc.hasNext)}" />&nbsp;]
          </apex:outputPanel>
        </td>
      </tr>
      </apex:outputText>
      
    </tbody>
  </table>

</div>
</apex:outputText>

</apex:component>