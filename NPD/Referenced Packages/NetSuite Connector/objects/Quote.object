<?xml version="1.0" encoding="UTF-8"?>
<CustomObject xmlns="http://soap.sforce.com/2006/04/metadata">
    <fields>
        <fullName>Celigo_Account__c</fullName>
        <deleteConstraint>SetNull</deleteConstraint>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Account</label>
        <referenceTo>Account</referenceTo>
        <relationshipLabel>Quotes</relationshipLabel>
        <relationshipName>Quotes</relationshipName>
        <required>false</required>
        <type>Lookup</type>
    </fields>
    <fields>
        <fullName>Document_Id__c</fullName>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Document Id</label>
        <length>255</length>
        <required>false</required>
        <type>Text</type>
        <unique>false</unique>
    </fields>
    <fields>
        <fullName>Handling_Cost__c</fullName>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Handling Cost</label>
        <precision>18</precision>
        <required>false</required>
        <scale>2</scale>
        <type>Currency</type>
    </fields>
    <fields>
        <fullName>NetSuite_Id__c</fullName>
        <caseSensitive>false</caseSensitive>
        <deprecated>false</deprecated>
        <externalId>true</externalId>
        <label>NetSuite Id</label>
        <length>255</length>
        <required>false</required>
        <type>Text</type>
        <unique>true</unique>
    </fields>
    <fields>
        <fullName>NetSuite_Quote_Number__c</fullName>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>NetSuite Quote #</label>
        <length>255</length>
        <required>false</required>
        <type>Text</type>
        <unique>false</unique>
    </fields>
    <fields>
        <fullName>NetSuite_Sync_Error__c</fullName>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>NetSuite Sync Error</label>
        <length>32768</length>
        <type>LongTextArea</type>
        <visibleLines>3</visibleLines>
    </fields>
    <fields>
        <fullName>PDF_File__c</fullName>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <formula>IF( Document_Id__c == null , &apos;&apos;, HYPERLINK(&apos;/servlet/servlet.FileDownload?file=&apos; + Document_Id__c , Name + &apos;.pdf&apos;))</formula>
        <formulaTreatBlanksAs>BlankAsZero</formulaTreatBlanksAs>
        <label>NetSuite PDF File</label>
        <required>false</required>
        <type>Text</type>
        <unique>false</unique>
    </fields>
    <fields>
        <fullName>Push_To_NetSuite__c</fullName>
        <defaultValue>false</defaultValue>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Push To NetSuite</label>
        <type>Checkbox</type>
    </fields>
    <fields>
        <fullName>Pushed_From_NetSuite__c</fullName>
        <defaultValue>false</defaultValue>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Pushed From NetSuite</label>
        <type>Checkbox</type>
    </fields>
    <fields>
        <fullName>Sync_In_Progress__c</fullName>
        <defaultValue>false</defaultValue>
        <deprecated>false</deprecated>
        <externalId>false</externalId>
        <label>Sync In Progress</label>
        <type>Checkbox</type>
    </fields>
    <webLinks>
        <fullName>Create_NetSuite_Order</fullName>
        <availability>online</availability>
        <displayType>button</displayType>
        <linkType>javascript</linkType>
        <masterLabel>Create NetSuite Order</masterLabel>
        <openType>onClickJavaScript</openType>
        <protected>false</protected>
        <url>var Celigo = {};
	Celigo.SFDC = (function() {
		var opportunitySyncManager = function() {
			this.triggerSync = function() {
			this.openPopup();
			};

			this.openPopup = function() {

				var top = screen.height - (screen.height * .7) - 80,
				left = screen.width - (screen.width * .65) - 87,
				params = &apos;dependent = yes,resizable=yes,scrollbars=false,toolbar=false,menubar=false,location=false,status=true,directories=false,width=575,height=200,top=&apos;;

				params += top.toString();
				params += &apos;,left=&apos; + left.toString() + &apos;\&apos;&apos;;


				{!REQUIRESCRIPT(&quot;/soap/ajax/32.0/connection.js&quot;)} 

				var oppId_results = sforce.connection.query(&quot;select OpportunityId from Quote where Id =&apos;{!Quote.Id}&apos;&quot;);
				var oppId = oppId_results.getArray(&quot;records&quot;)[0][&apos;OpportunityId&apos;];

				var opp_results = sforce.connection.query(&quot;select Id,SyncedQuoteId,StageName,netsuite_conn__Originated_From_NetSuite__c,AccountId from Opportunity where Id =&apos;&quot; + oppId + &quot;&apos;&quot;);
				var opportunityRecord = opp_results.getArray(&quot;records&quot;)[0];

				if (!opportunityRecord) {
					alert(&apos;Could not find the Opportunity related to this Quote with opportunity id: &apos; + oppId);
					return;
				}
				//validations on SyncedQuote
				if (!opportunityRecord.SyncedQuoteId ||
				opportunityRecord.SyncedQuoteId.toString().indexOf(&apos;{!Quote.Id}&apos;) &lt; 0) {
					alert(&apos;The Quote is not in sync with Opportunity it is created on. NetSuite Sales Order can be created only when Quote and Opportunity are in sync.&apos;);
					return;
				}

				if (!opportunityRecord.AccountId) {
					alert(&quot;Please select an Account on the Opportunity of this Quote to start the sync.&quot;);
					return;
				}
				if (opportunityRecord.netsuite_conn__Originated_From_NetSuite__c === &apos;1&apos;) {
					alert(&quot;Opportunity on this Quote is created from NetSuite Sales Order, can not create another Sales Order.&quot;);
					return;
				}
				var resultQLI = sforce.connection.query(&quot;Select Id from OpportunityLineItem where OpportunityId = &apos;&quot; + oppId + &quot;&apos;&quot;);
				var recordsQLI = resultQLI.getArray(&quot;records&quot;);
				if(resultQLI.size == 0 || recordsQLI == null){
					alert(&apos;Please add at least one Product in the Opportunity.&apos;);
					return;
				}
				var resultOppStting = sforce.connection.query(&quot;select Id, netsuite_conn__Enable_Team_Selling__c from netsuite_conn__Opportunity_Sync_Settings__c where Name = \&apos;Opportunity Sync Settings\&apos;&quot;);
				var rocordsOppStting = resultOppStting.getArray(&quot;records&quot;);
				if(rocordsOppStting &amp;&amp; 
				rocordsOppStting.length &gt; 0 &amp;&amp; 
				rocordsOppStting[0].netsuite_conn__Enable_Team_Selling__c == &quot;true&quot;) {
					
					var resultSplitCount = sforce.connection.query(&quot;SELECT COUNT(SplitOwnerId) total FROM OpportunitySplit where OpportunityId = &apos;&quot;+ oppId +&quot;&apos;&quot;);
					var recordsSplitCount = resultSplitCount.getArray(&quot;records&quot;);
					var resultDistinctSplitCount = sforce.connection.query(&quot;SELECT COUNT_DISTINCT(SplitOwnerId) total FROM OpportunitySplit where OpportunityId = &apos;&quot;+ oppId +&quot;&apos;&quot;);
					var recordsDistinctSplitCount = resultDistinctSplitCount.getArray(&quot;records&quot;);
					if(recordsSplitCount &amp;&amp; recordsDistinctSplitCount &amp;&amp;
					recordsSplitCount.length &gt; 0 &amp;&amp; recordsDistinctSplitCount.length &gt; 0 &amp;&amp;
					recordsSplitCount[0].total != recordsDistinctSplitCount[0].total) {
						alert(&quot;Opportunity split contains duplicate. Remove duplicate and try again.&quot;);
						return;
					}
				}
				
				var isTestingModeAndEndTheFlow = false;
				var syncSpecificCustomSettingResult = sforce.connection.query(&quot;select Id, netsuite_conn__Enable_Testing_Mode__c, netsuite_conn__Criteria_Text__c from netsuite_conn__Specific_Records_Sync_Settings__c where Name = \&apos;Specific Records Sync Setting\&apos;&quot;, {
					onSuccess : function(syncSpecificCustomSettingResult) {
						var syncSpecificCustomSetting = syncSpecificCustomSettingResult.getArray(&quot;records&quot;);
						if (syncSpecificCustomSetting &amp;&amp;
						syncSpecificCustomSetting.length &gt; 0 &amp;&amp;
						syncSpecificCustomSetting[0].netsuite_conn__Enable_Testing_Mode__c == &quot;true&quot;) {
							var description = &quot;{!JSENCODE(Quote.Description)}&quot;;
							var criteriaText = syncSpecificCustomSetting[0].netsuite_conn__Criteria_Text__c;
							if (criteriaText) {
								criteriaText = criteriaText.toLowerCase();
							}
							if (!description || 
							(description &amp;&amp;
							description.toLowerCase().indexOf(criteriaText) == -1)) {
								isTestingModeAndEndTheFlow = true;
								alert(&quot;Connector is running in Testing mode. Please make sure, Description field on Account, Opportunity &amp; Quote contains &quot; + syncSpecificCustomSetting[0].netsuite_conn__Criteria_Text__c + &quot;.&quot;);
							}
						}
						if (isTestingModeAndEndTheFlow === true) {
							return;
						}
						var result = sforce.connection.query(&quot;select Id, StageName from Opportunity where Id = &apos;&quot; + opportunityRecord.Id + &quot;&apos;&quot;, {
							onSuccess: function(result) {	
								var records = result.getArray(&quot;records&quot;);
								var oppSyncSetting = sforce.connection.query(&quot;select Id,netsuite_conn__Sync_If_Stage_is_any_of__c from netsuite_conn__Opportunity_Sync_Settings__c where Name = \&apos;Opportunity Sync Settings\&apos;&quot;, {
									onSuccess: function(oppSyncSetting) {
										var opportunity = records[0];
										var opSyncSetting = oppSyncSetting.getArray(&quot;records&quot;);
										var shouldSync = true;

										if (opSyncSetting &amp;&amp; opSyncSetting.length &gt; 0 &amp;&amp; opSyncSetting[0].netsuite_conn__Sync_If_Stage_is_any_of__c) {
											var settingStageValues = opSyncSetting[0].netsuite_conn__Sync_If_Stage_is_any_of__c.split(&apos;,&apos;);

											console.log(&apos;settingStageValues&apos; + settingStageValues);

											for (var i = 0; i &lt; settingStageValues.length; i++) {
												if (settingStageValues[i] === opportunity.StageName) {
													shouldSync = true;
													break;
												} else {
													shouldSync = false;
												}
											}
										}

										if (shouldSync) {
											this.pu = window.open(&apos;/apex/netsuite_conn__Opportunity_Sync?whence=&apos; + oppId, &apos;NetSuite_Synchronization&apos;, params);
										} else {
											alert(&apos;Opportunity sync couldn\&apos;t run because Opportunity stage didn\&apos;t meet the Stage criteria specified in Opportunity Sync Settings.&apos; +
											&apos;\n Opportunity stage is: &apos; + opportunity.StageName + &apos;. It should be\/ any of: &apos; + opSyncSetting[0].netsuite_conn__Sync_If_Stage_is_any_of__c);
										}
									},
									onFailure: function(error) {
										alert(&apos;Error occurred: &apos; + JSON.stringify(error));
									}
								});

							},
							onFailure: function(error) {
								alert(&apos;Error occurred: &apos; + JSON.stringify(error));
							}
						});	
					},
					onFailure : function(error) {
						alert(&apos;Error occurred: &apos; + JSON.stringify(error));
						isTestingModeAndEndTheFlow = true;
					}
				});	
				
			};
		};

		return {
			main: function() {
				Celigo.opportunitySyncMgr = new opportunitySyncManager();
				Celigo.opportunitySyncMgr.triggerSync();
			}
		};
	})();
	Celigo.SFDC.main();</url>
    </webLinks>
    <webLinks>
        <fullName>Sync_To_NetSuite</fullName>
        <availability>online</availability>
        <displayType>button</displayType>
        <linkType>javascript</linkType>
        <masterLabel>Sync To NetSuite Quote</masterLabel>
        <openType>onClickJavaScript</openType>
        <protected>false</protected>
        <url>var Celigo = {};
	Celigo.SFDC = (function() {
		var QuoteSyncManager = function() {
			this.triggerSync = function() {
				this.openPopup();
			};

			this.openPopup = function(){

				var top = screen.height - (screen.height * 0.7) - 80,
				left = screen.width - (screen.width * 0.65) - 87,
				params = &apos;dependent = yes,resizable=yes,scrollbars=false,toolbar=false,menubar=false,location=false,status=true,directories=false,width=575,height=200,top=&apos;;

				params += top.toString();
				params += &apos;,left=&apos; + left.toString() + &apos;\&apos;&apos;;

				{!REQUIRESCRIPT(&quot;/soap/ajax/32.0/connection.js&quot;)}
				
				var resultQLI = sforce.connection.query(&quot;Select Id from QuoteLineItem where QuoteId = &apos;&quot;+ &quot;{!Quote.Id}&quot; +&quot;&apos;&quot;);
				var recordsQLI = resultQLI.getArray(&quot;records&quot;);
				if(resultQLI.size == 0 || recordsQLI == null){
					alert(&apos;Please add at least one Product in this Quote.&apos;);
					return;
				}

				var isTestingModeAndEndTheFlow = false;
				var syncSpecificCustomSettingResult = sforce.connection.query(&quot;select Id, netsuite_conn__Enable_Testing_Mode__c, netsuite_conn__Criteria_Text__c from netsuite_conn__Specific_Records_Sync_Settings__c where Name = \&apos;Specific Records Sync Setting\&apos;&quot;, {
					onSuccess : function(syncSpecificCustomSettingResult) {
						var syncSpecificCustomSetting = syncSpecificCustomSettingResult.getArray(&quot;records&quot;);
						if (syncSpecificCustomSetting &amp;&amp;
						syncSpecificCustomSetting.length &gt; 0 &amp;&amp;
						syncSpecificCustomSetting[0].netsuite_conn__Enable_Testing_Mode__c == &quot;true&quot;) {
							var description = &quot;{!JSENCODE(Quote.Description)}&quot;;
							var criteriaText = syncSpecificCustomSetting[0].netsuite_conn__Criteria_Text__c;
							if (criteriaText) {
								criteriaText = criteriaText.toLowerCase();
							}
							if (!description || 
							(description &amp;&amp;
							description.toLowerCase().indexOf(criteriaText) == -1)) {	
								isTestingModeAndEndTheFlow = true;
								alert(&quot;Connector is running in Testing mode. Please make sure, Description field on Account, Opportunity &amp; Quote contains &quot; + syncSpecificCustomSetting[0].netsuite_conn__Criteria_Text__c + &quot;.&quot;);
							}
						}
						if (isTestingModeAndEndTheFlow === true) {
							return;
						}
						var result = sforce.connection.query(&quot;select Id from quote where Id = &apos;&quot;+ &quot;{!Quote.Id}&quot; +&quot;&apos;&quot;, {
							onSuccess: function(result) {
								if (!&quot;{!Quote.Celigo_Account__c}&quot;) {
									alert(&quot;Please select an Account on the Opportunity, then edit and save the quote and try to sync.&quot;);
									return;
								}
								var records = result.getArray(&quot;records&quot;);
								this.pu = window.open(&apos;/apex/netsuite_conn__Quote_Sync?whence=&apos;+&quot;{!Quote.Id}&quot;, &apos;NetSuite_Synchronization&apos;, params);
							},
							onFailure: function(error) {
								alert(&apos;Error occurred: &apos; + JSON.stringify(error));
							}
						});	
					},
					onFailure : function(error) {
						alert(&apos;Error occurred: &apos; + JSON.stringify(error));
						isTestingModeAndEndTheFlow = true;
					}
				}); 
			};
		};

		return {
			main : function() {
				Celigo.quoteSyncMgr = new QuoteSyncManager();
				Celigo.quoteSyncMgr.triggerSync();
			}
		};
	})();
	Celigo.SFDC.main();</url>
    </webLinks>
</CustomObject>
