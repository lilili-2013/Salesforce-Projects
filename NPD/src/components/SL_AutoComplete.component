<apex:component controller="SL_AutoComplete_Controller" >
  <!-- JQuery Files -->
    <apex:stylesheet value="{!URLFOR($Resource.SL_HomePage_SearchAccounts, '/css/AutoCompleteCSS.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.SL_HomePage_SearchAccounts, '/js/jquery-1.7.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.SL_HomePage_SearchAccounts, '/js/jquery-ui-1.8.18.custom.min.js')}"/>
  <!-- Inline VF auto complete using sforce -->
    <script language="JavaScript1.2" src="/js/functions.js"></script> 
    <script src="/soap/ajax/9.0/connection.js" type="text/javascript"></script> 
    
  <!-- Attributes Required For Component -->
    <apex:attribute name="objectname" description="The object name you want to look for." type="String" required="true"/>
    <apex:attribute name="sObjectFieldName" description="The object's fields name you want to display for." type="String" required="true"/>
    <apex:attribute name="isInlineVF" description="The auto-complete was in page or Inline VF."     type="Boolean" required="true"/>
    <apex:attribute name="autocomplete_textbox" description="The ID for the Autocomplete List Textbox."     type="String" required="true"/>
    <apex:attribute name="bgColor" description="To set the background color of the modal window popup" type="String" />
    <apex:attribute name="fontSize" description="To set a specific font size of the model window popup" type="String" />
    <apex:attribute name="selectedPracticeId" description="to set the practice id" type="Id" />
    <apex:attribute name="isAccountHierarchy" description="check is account hierarchy page" type="Boolean" />
    <apex:attribute name="isLeadOverrideCalled" description="check if component is called from lead override page" type="Boolean" />
   <style>
    .ui-autocomplete-loading, #sl-bs .ui-autocomplete-loading { background: white url("/auraFW/resources/aura/images/spinner.gif") right center no-repeat; } 
    /*.ui-menu-item{background: #fbc900 ;}*/
    .ui-menu-item
    {
        background:{!IF(ISBLANK(bgColor),'#fbc900',bgColor)};
        font-size: {!IF(ISBLANK(fontSize),'12',fontSize)}px;
    }
    .ui-autocomplete {
        max-height: 200px;
        max-width: 100%;
        overflow-y: auto;
        overflow-x: hidden;
    }  
  </style>
  
  <script type="text/javascript">
    var j$ = jQuery.noConflict();
    j$(document).ready(function() {

        var sObjects;
        var queryTerm;

        j$(esc('{!autocomplete_textbox}')).autocomplete({
            minLength: 2,
            
            source: function(request, response) {
                        queryTerm = request.term;
                        queryTerm = queryTerm.trim(); 
                        if({!isInlineVF} == false && '{!selectedPracticeId}' != 'select')
                        {
                            SL_AutoComplete_Controller.findSObjects("Account", "{!selectedPracticeId}",  
                                queryTerm, 
                                function(result, event){
                                if(event.type == 'exception') {
                                
                                } else {
                                    
                                    //debugger;
                                    sObjects = result;
                                    response(sObjects);
                                    if(result == null)
                                    {
                                        callAFMessage();
                                    }
                                }
                            });
                        }
                        else if('{!selectedPracticeId}' != 'select')
                        {
                            sforce.connection.sessionId = '{!$Api.Session_ID}';
                            var strQuery = "select id, Name from ";
                            strQuery += "{!objectName}"; 
                            strQuery += " where Name Like '"+ queryTerm +"%' limit 20";
                            var lstSobjectResults = sforce.connection.query(strQuery);
                            var result = [];
                            if(parseInt(lstSobjectResults.size) > 0)
                            {   
                                if(lstSobjectResults.size == '1')
                                {
                                    var JSONObject = { "Id":lstSobjectResults.records.Id, "Name":lstSobjectResults.records.Name};
                                    result[0] = JSONObject;
                                }
                                else
                                {
                                    for(var i = 0; i < lstSobjectResults.records.length; i++ ) 
                                    {
                                        var JSONObject = { "Id":lstSobjectResults.records[i].Id, "Name":lstSobjectResults.records[i].Name};
                                        result[i] = JSONObject;
                                    }
                                }
                                response(result);   
                            }
                        }
                   },
            focus: function( event, ui ) {
                    itemName = htmlDecodeString(ui.item.Name);
                    j$(esc('{!autocomplete_textbox}')).val( itemName );
                    return false;
                    },
            select: function( event, ui ) {
                        itemName = htmlDecodeString(ui.item.Name);
                        j$(esc('{!autocomplete_textbox}')).val( itemName );
                        j$(esc('{!autocomplete_textbox}_lkid')).val( ui.item.Id );
                        j$(esc('{!autocomplete_textbox}_lkold')).val( itemName );
                        if('{!isLeadOverrideCalled}' == 'false')
                        {
                            if('{!isAccountHierarchy}' == 'false')
                                window.open('/'+ui.item.Id, '_blank');//window.top.location = '/'+ui.item.Id;
                            else if('{!isAccountHierarchy}' == 'true')
                                window.parent.onSelectAccountAF();
                        }
                        return false;
                    }
         })
         .data( "autocomplete" )._renderItem = function( ul, item ) {
            var entry = "<a href='/"+item.Id+"'>" + item.Name;
            entry = entry + "</a>";
            var re = new RegExp('(' + queryTerm+ ')', 'gi');
            entry = entry.replace(re, "<b>" + queryTerm+ "</b>");
            return j$( "<li></li>" )
                .data( "item.autocomplete", item )
                .append( entry )
                .appendTo( ul );                
        };
    });

    function esc(myid) {
           return '#' + myid.replace(/(:|\.)/g,'\\\\$1');
    }
    
    function htmlDecodeString(s)
    {
        var d = document.getElementById('divDecoder');
        d.innerHTML = s
        return d.firstChild.nodeValue; 
    }   
    function callAFMessage()
    {
        document.getElementById('msg').style.display='';
    }
    
  </script>
  <div style="display:none;" id="msg">
    <span style="color: red; "> Please Enter Valid Sobject and Fields API Name</span>
  </div>
  <div id="divDecoder" style="display:none">
  </div>
</apex:component>